// Generated by CoffeeScript 1.8.0
(function() {
  var GDS, googleapis, sys,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  sys = require("util");

  googleapis = require('node-google-api');

  GDS = (function() {
    function GDS() {
      this.lookup = __bind(this.lookup, this);
      this.set = __bind(this.set, this);
      this.connect = __bind(this.connect, this);
      this.authorize = __bind(this.authorize, this);
    }

    GDS.prototype.authorize = function() {
      this.credentials = new googleapis.auth.Compute();
      this.credentials.authorize((function(computeErr) {
        var errors;
        if (computeErr) {
          errors = {
            "compute auth error": computeErr
          };
          if (process.env["DATASTORE_SERVICE_ACCOUNT"]) {
            this.credentials = new googleapis.auth.JWT(process.env["DATASTORE_SERVICE_ACCOUNT"], process.env["DATASTORE_PRIVATE_KEY_FILE"], SCOPES);
            this.credentials.authorize((function(jwtErr) {
              if (jwtErr) {
                errors["jwt auth error"] = jwtErr;
                this.emit("error", errors);
                return;
              }
              this.connect();
            }).bind(this));
          } else {
            sys.puts(sys.inspect(errors));
          }
        } else {
          this.authorized = true;
        }
      }).bind(this));
    };

    GDS.prototype.connect = function() {
      googleapis.discover("datastore", "v1beta2").withAuthClient(this.credentials).execute((function(err, client) {
        if (err) {
          console.log("google datastore connection error : " + err);
          return;
        }
        this.datastore = client.datastore.withDefaultParams({
          datasetId: this.datasetId
        }).datasets;
      }).bind(this));
    };

    GDS.prototype.set = function(type, obj, callback) {
      var entity;
      entity = {
        key: {
          path: [
            {
              kind: type
            }
          ]
        },
        properties: obj
      };
      return this.datastore.commit({
        mutation: {
          insertAutoId: [entity]
        },
        mode: "NON_TRANSACTIONAL"
      }).execute(callback);
    };

    GDS.prototype.lookup = function(type, name, callback) {
      this.datastore.lookup({
        readOptions: {
          transaction: this.transaction
        },
        keys: [
          {
            path: [
              {
                kind: type,
                name: name
              }
            ]
          }
        ]
      }).execute((function(err, result) {
        var entity;
        if (err) {
          console.log("google datastore error", err);
          return;
        }
        if (result.found) {
          entity = result.found[0].entity;
        }
        return callback(entity);
      }).bind(this));
    };

    return GDS;

  })();

  module.exports = GDS;

}).call(this);

//# sourceMappingURL=gds.js.map
