// Generated by CoffeeScript 1.8.0
(function() {
  var GooglePersistence, debug, defer, gcloud,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  gcloud = require('gcloud');

  defer = require('node-promise').defer;

  debug = process.env["DEBUG"];

  GooglePersistence = (function() {
    function GooglePersistence(dburl, DB) {
      this.dburl = dburl;
      this.DB = DB;
      this.remove = __bind(this.remove, this);
      this.set = __bind(this.set, this);
      this.search = __bind(this.search, this);
      this.findQuery = __bind(this.findQuery, this);
      this.findMany = __bind(this.findMany, this);
      this.find = __bind(this.find, this);
      this.get = __bind(this.get, this);
      this.count = __bind(this.count, this);
      this.all = __bind(this.all, this);
      this.getDbFor = __bind(this.getDbFor, this);
      this.connect = __bind(this.connect, this);
      this.connection = void 0;
      this.dbs = [];
    }

    GooglePersistence.prototype.connect = function() {
      var q;
      console.log('Google connect called...');
      q = defer();
      q.resolve(this);
      return q;
    };

    GooglePersistence.prototype.getDbFor = function(_type) {
      var dataset, db, q, type;
      q = defer();
      type = _type.toLowerCase();
      db = this.dbs[type];
      if (db) {
        q.resolve(db);
      } else {
        dataset = gcloud.datastore({
          projectId: process.env.GCLOUD_PROJECT,
          namespace: 'spincycle'
        });
        this.dbs[type] = dataset;
        q.resolve(dataset);
      }
      return q;
    };

    GooglePersistence.prototype.all = function(_type, cb) {
      var type;
      type = _type.toLowerCase();
      if (debug) {
        console.log('Google.all called for ' + type);
      }
      return this.getDbFor(type).then((function(_this) {
        return function(db) {
          var query;
          query = db.createQuery(type).order('-createdAt').limit(10000);
          return db.runQuery(query, function(err, entities) {
            if (err) {
              if (debug) {
                console.log('Google.all ERROR: ' + err);
              }
              if (debug) {
                console.dir(err);
              }
              return cb();
            } else {
              if (debug) {
                console.log('Google.all returns ' + entities.length + ' entities');
              }
              if (debug) {
                console.dir(entities);
              }
              return cb(entities);
            }
          });
        };
      })(this));
    };

    GooglePersistence.prototype.count = function(_type) {
      var q, type;
      if (debug) {
        console.log('Google.count called');
      }
      type = _type.toLowerCase();
      q = defer();
      this.getDbFor(type).then((function(_this) {
        return function(db) {
          var count, query;
          query = db.createQuery('__Stat_spincycle_' + type + '__');
          count = query.getproeprties('count');
          console.log('Google.count return ' + count);
          q.resolve(count);
          return "db.runQuery query, (err, entities) ->\n  if err\n    if debug then console.log 'Google.all ERROR: '+err\n    if debug then console.dir err\n    cb()\n  else\n    if debug then console.log 'Google.all returns '+entities.length+' entities'\n    if debug then console.dir entities\n    cb(entities)";
        };
      })(this));
      return q;
    };

    GooglePersistence.prototype.get = function(_type, id, cb) {
      var type;
      if (debug) {
        console.log('Google.get called ');
      }
      type = _type.toLowerCase();
      return this.getDbFor(type).then((function(_this) {
        return function(db) {
          var key;
          key = db.key([type, id]);
          return db.get(key, function(err, entity) {
            if (err) {
              if (debug) {
                console.log('Google.get ERROR: ' + err);
              }
              if (debug) {
                console.dir(err);
              }
              return cb();
            } else {
              if (debug) {
                console.log('Google.get returns entity');
              }
              if (debug) {
                console.dir(entity);
              }
              return cb(entity);
            }
          });
        };
      })(this));
    };

    GooglePersistence.prototype.find = function(_type, property, _value) {
      return this.findMany(_type, property, _value);
    };

    GooglePersistence.prototype.findMany = function(_type, property, _value) {
      var query, value;
      if (debug) {
        console.log('Google.findMany called');
      }
      value = _value || "";
      query = db.createQuery(type).order('-createdAt').limit(10000).filter(property, '=', value);
      db.runQuery(query, function(err, entities) {
        if (err) {
          if (debug) {
            console.log('Google.all ERROR: ' + err);
          }
          if (debug) {
            console.dir(err);
          }
          return cb();
        } else {
          if (debug) {
            console.log('Google.all returns ' + entities.length + ' entities');
          }
          if (debug) {
            console.dir(entities);
          }
          return cb(entities);
        }
      });
      return q;
    };

    GooglePersistence.prototype.findQuery = function(_type, query) {
      return this.findMany(_type, query.property, query.value);
    };

    GooglePersistence.prototype.search = function(_type, property, _value) {
      return this.findMany(_type, property, value);
    };

    GooglePersistence.prototype.set = function(_type, obj, cb) {
      var type;
      type = _type.toLowerCase();
      if (debug) {
        console.log('Google.set called for ' + type);
      }
      if (debug) {
        console.dir(obj);
      }
      return this.getDbFor(type).then((function(_this) {
        return function(db) {
          var key;
          if (!obj.id) {
            key = db.key(type);
            obj.id = key.path[1];
          } else {
            key = db.key(type, obj.id);
          }
          return db.upsert(key, obj, function(err) {
            if (err) {
              if (debug) {
                console.log('Google.set ERROR: ' + err);
              }
              if (debug) {
                console.dir(err);
              }
              return cb(false);
            } else {
              return cb(true);
            }
          });
        };
      })(this));
    };

    GooglePersistence.prototype.remove = function(_type, obj, cb) {
      var id, type;
      if (debug) {
        console.log('Google.remove called');
      }
      type = _type.toLowerCase();
      id = obj.id;
      return this.getDbFor(type).then((function(_this) {
        return function(db) {
          var key;
          key = db.key(type, obj.id);
          return db["delete"](key, function(err, apiResponse) {
            if (err) {
              if (debug) {
                console.log('Google.remove ERROR: ' + apiResponse);
              }
              if (debug) {
                console.dir(apiResponse);
              }
              return cb(false);
            } else {
              return cb(true);
            }
          });
        };
      })(this));
    };

    return GooglePersistence;

  })();

  module.exports = GooglePersistence;

}).call(this);

//# sourceMappingURL=GooglePersistence.js.map
