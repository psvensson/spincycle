// Generated by CoffeeScript 1.10.0
(function() {
  var HttpMethod, basicAuth, debug, url, uuid;

  uuid = require('node-uuid');

  url = require('url');

  basicAuth = require('basic-auth');

  debug = process.env["DEBUG"];

  HttpMethod = (function() {
    HttpMethod.httproutes = [];

    HttpMethod.props = {};

    function HttpMethod(messageRouter, app, basePath) {
      var doSend;
      doSend = function(req, res, url_parts) {
        var ip, message, p, part, port, target, user;
        user = basicAuth(req);
        if (user) {
          console.log('basic auth user detected');
          console.dir(user);
          if (HttpMethod.props && HttpMethod.props.user && HttpMethod.props.user.name) {
            if (HttpMethod.props.user.name !== user.name && HttpMethod.props.user.pass !== user.pass) {
              console.log('wrong username or password provided');
              res.json({
                status: e.general.NOT_ALLOWED,
                info: 'wrong basic auth username or pass.',
                payload: {
                  error: 'Basic Auth Failure'
                }
              });
              return;
            }
          }
        }
        ip = req.connection.remoteAddress;
        port = req.connection.remotePort;
        target = HttpMethod.httproutes[req.query.target];
        if (target) {
          message = {
            client: ip + ':' + port,
            target: req.query.target,
            messageId: url_parts.messageId || uuid.v4()
          };
          for (p in url_parts) {
            part = url_parts[p];
            message[p] = part;
          }
          message.replyFunc = function(reply) {
            res.json(reply);
            if (debug) {
              return console.log('HttpMethod calling target ' + target);
            }
          };
          return target(message);
        }
      };
      app.get(basePath, function(req, res) {
        var url_parts;
        url_parts = req.query;
        return doSend(req, res, url_parts);
      });
      app.post(basePath, function(req, res) {
        var url_parts;
        url_parts = req.body;
        return doSend(req, res, url_parts);
      });
      messageRouter.addMethod('express', this);
    }

    HttpMethod.prototype.registrationFunc = function(targetName, targetFunc, props) {
      this.props = props;
      return HttpMethod.httproutes[targetName] = targetFunc;
    };

    return HttpMethod;

  })();

  module.exports = HttpMethod;

}).call(this);

//# sourceMappingURL=HttpMethod.js.map
