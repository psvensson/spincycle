// Generated by CoffeeScript 1.8.0
(function() {
  var CouchPersistence, OStore, couchdb, defer,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  couchdb = require('felix-couchdb');

  defer = require('node-promise').defer;

  OStore = require('./OStore');

  CouchPersistence = (function() {
    function CouchPersistence() {
      this.set = __bind(this.set, this);
      this.get = __bind(this.get, this);
      this.all = __bind(this.all, this);
      this.getDbFor = __bind(this.getDbFor, this);
      this.connect = __bind(this.connect, this);
      this.dbs = [];
    }

    CouchPersistence.prototype.connect = function() {
      return this.client = couchdb.createClient(5984, 'localhost', {
        auth: {
          username: 'admin',
          password: process.env["COUCH_ADMIN_PW"]
        }
      });
    };

    CouchPersistence.prototype.getDbFor = function(_type) {
      var db, q, type;
      q = defer();
      type = _type.toLowerCase();
      db = this.dbs[type];
      if (!db) {
        db = this.client.db(type);
        db.exists((function(_this) {
          return function(er, exists) {
            if (exists) {
              return q.resolve(db);
            } else {
              console.log('database ' + type + ' does not exists. creating as we speak...');
              return db.create(function(er) {
                if (er) {
                  console.log('DB create error: ' + JSON.stringify(er));
                }
                db.saveDesign(type, {
                  views: {
                    'all': {
                      map: function(doc) {
                        if (doc.id && doc.type.toLowerCase() === type) {
                          return emit(doc.id, doc);
                        }
                      }
                    }
                  }
                });
                _this.dbs[type] = db;
                return q.resolve(db);
              });
            }
          };
        })(this));
      }
      return q;
    };

    CouchPersistence.prototype.all = function(_type, cb) {
      var rv, type;
      rv = [];
      type = _type.toLowerCase();
      return this.getDbFor(type).then((function(_this) {
        return function(db) {
          return db.allDocs(function(err, res) {
            var count;
            if (err) {
              console.log('CouchPersistence fetch all ERROR: ' + err);
              console.dir(err);
              return cb([]);
            } else {
              count = res.rows.length;
              if (count === 0) {
                return cb(rv);
              } else {
                return res.rows.forEach(function(row) {
                  return db.getDoc(row.id, function(verr, value) {
                    if (row.id.indexOf('_') === -1) {
                      rv.push(value);
                    }
                    if (--count === 0) {
                      return cb(rv);
                    }
                  });
                });
              }
            }
          });
        };
      })(this));
    };

    CouchPersistence.prototype.get = function(_type, id, cb) {
      var type;
      type = _type.toLowerCase();
      return this.getDbFor(type).then((function(_this) {
        return function(db) {
          return db.getDoc(id, function(err, res) {
            if (err) {
              console.log('** Couch Get ERROR for type ' + type + ' id ' + id + ': ' + err);
              console.dir(err);
            }
            if (cb) {
              return cb(res);
            }
          });
        };
      })(this));
    };

    CouchPersistence.prototype.set = function(_type, obj, cb) {
      var type;
      type = _type.toLowerCase();
      return this.getDbFor(type).then((function(_this) {
        return function(db) {
          var onSave;
          onSave = function(err, res, cb) {
            var oo;
            if (err) {
              console.log('** Couch Set ERROR: ' + err);
              console.dir(err);
              console.dir(obj);
            } else {
              oo = OStore.objects[obj.id];
              console.log('--------------------------------------------------------------------------------------------- couchpersistence.set setting _rev to ' + res.rev + ' on ' + type + ' ' + obj.id);
              if (!res.rev) {
                console.dir(res);
              }
              oo._rev = res.rev;
            }
            if (cb) {
              return cb(res);
            }
          };
          return db.saveDoc(obj.id, obj, onSave);
        };
      })(this));
    };

    return CouchPersistence;

  })();

  module.exports = CouchPersistence;

}).call(this);

//# sourceMappingURL=CouchPersistence.js.map
