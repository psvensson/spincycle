// Generated by CoffeeScript 1.10.0
(function() {
  var Couch, DB, LRU, Mongo, OStore, ResolveModule, Rethink, all, debug, defer, resolver, uuid;

  defer = require('node-promise').defer;

  all = require('node-promise').all;

  uuid = require('node-uuid');

  LRU = require('lru-cache');

  OStore = require('./OStore');

  Couch = require('./CouchPersistence');

  Mongo = require('./MongoPersistence');

  Rethink = require('./RethinkPersistence');

  ResolveModule = require('./ResolveModule');

  resolver = new ResolveModule();

  debug = process.env["DEBUG"];

  DB = (function() {
    function DB() {}

    DB.dburl = 'localhost';

    DB.lru = LRU();

    DB.lrudiff = LRU();

    DB.onUpdated = function(record) {
      return OStore.updateObj(record);
    };

    DB.getDataStore = function(name) {
      var q;
      q = defer();
      if (!DB.DataStore) {
        if (!name) {
          DB.DataStore = new Rethink(DB.dburl, DB);
        } else if (name === 'couchdb') {
          DB.DataStore = new Couch(DB.dburl);
        } else if (name === 'mongodb') {
          DB.DataStore = new Mongo(DB.dburl, DB);
        } else if (name === 'rethinkdb') {
          DB.DataStore = new Rethink(DB.dburl, DB);
        }
        DB.DataStore.connect().then(function(ds) {
          DB.DataStore = ds;
          return q.resolve(ds);
        });
      } else {
        q.resolve(DB.DataStore);
      }
      return q;
    };

    DB.createDatabases = function(dblist) {
      var q;
      q = defer();
      console.log('createDatabases called');
      DB.getDataStore().then(function(store) {
        var promises;
        console.log('DB.createDatabases got back store');
        promises = [];
        dblist.forEach(function(dbname) {
          console.log('attempting to get table for ' + dbname);
          return promises.push(store.getDbFor(dbname));
        });
        return all(promises).then(function(results) {
          console.log('DB.createDatabases all good');
          return q.resolve(results);
        });
      });
      return q;
    };

    DB.getFromStoreOrDB = function(type, id) {
      var q;
      console.log('DB.getFromStoreOrDb called for ' + type + ' id ' + id);
      q = defer();
      OStore.getObject(id, type).then(function(oo) {
        if (oo) {
          console.log('getFromStoreOrDb resolved from Ostore directly...');
          return q.resolve(oo);
        } else {
          return DB.get(type, [id]).then(function(records) {
            var record;
            console.log('DB.getFromStoreOrDb get returns..');
            console.dir(records);
            if (records && records[0]) {
              record = records[0];
              return resolver.createObjectFrom(record).then(function(ooo) {
                return q.resolve(ooo);
              });
            } else {
              return q.resolve(void 0);
            }
          });
        }
      });
      return q;
    };

    DB.getOrCreateObjectByRecord = function(record) {
      var q;
      q = defer();
      OStore.getObject(record.id, record.type).then(function(oo) {
        if (debug) {
          console.log('DB.getOrCreateObjectByRecord OStore returns ' + oo);
        }
        if (oo) {
          return q.resolve(oo);
        } else {
          return DB.get(record.type, [record.id]).then(function(res) {
            if (debug) {
              console.log('DB.getOrCreateObjectByRecord DB load returns ' + res);
            }
            if (debug) {
              console.dir(res);
            }
            if (res && res[0]) {
              console.log('DB.getOrCreateObjectByRecord found existing record in DB *');
              record = res[0];
            }
            return resolver.createObjectFrom(record).then(function(ooo) {
              if (debug) {
                console.log('DB.getOrCreateObjectByRecord createFromRecord returns ' + ooo);
              }
              return q.resolve(ooo);
            });
          });
        }
      });
      return q;
    };

    DB.byProviderId = function(type, pid) {
      var q;
      q = defer();
      if (pid) {
        DB.getDataStore().then(function(store) {
          return store.byProviderId(type, pid).then(function(res) {
            return q.resolve(res);
          });
        });
      } else {
        q.resolve(void 0);
      }
      return q;
    };

    DB.all = function(type, cb) {
      return DB.getDataStore().then(function(store) {
        if (store.all) {
          return store.all(type, cb);
        } else {
          console.log('DB.all: All not implemented in underlying persistence logic');
          return cb([]);
        }
      });
    };

    DB.count = function(type) {
      var q;
      q = defer();
      DB.getDataStore().then(function(store) {
        return store.count(type).then(function(value) {
          return q.resolve(value);
        });
      });
      return q;
    };

    DB.find = function(type, property, value) {
      var q;
      q = defer();
      DB.getDataStore().then(function(store) {
        return store.find(type, property, value).then(function(result) {
          if (!result) {
            console.log('DB.find type ' + type + ', property ' + property + ', value ' + value + ' got back ' + result);
          } else {
            DB.lru.set(result.id, result);
          }
          return q.resolve(result);
        });
      });
      return q;
    };

    DB.findMany = function(type, property, value) {
      var q;
      q = defer();
      DB.getDataStore().then(function(store) {
        return store.findMany(type, property, value).then(function(results) {
          if (debug) {
            console.log('DB.findMany results are..');
          }
          if (debug) {
            console.dir(results);
          }
          if (!results || !results.length) {
            console.log('DB.find type ' + type + ', property ' + property + ', value ' + value + ' got back ' + results);
            return q.resolve([]);
          } else {
            results.forEach(function(result) {
              return DB.lru.set(result.id, result);
            });
            return q.resolve(results);
          }
        });
      });
      return q;
    };

    DB.findQuery = function(type, query) {
      var q;
      q = defer();
      DB.getDataStore().then(function(store) {
        return store.findQuery(type, query).then(function(results) {
          if (results && results.length && results.length > 0) {
            results.forEach(function(result) {
              if (result) {
                return DB.lru.set(result.id, result);
              }
            });
          }
          return q.resolve(results);
        });
      });
      return q;
    };

    DB.search = function(type, property, value) {
      var q;
      q = defer();
      DB.getDataStore().then(function(store) {
        return store.search(type, property, value).then(function(results) {
          console.log('DB.search results were..');
          console.dir(results);
          if (!results) {
            console.log('DB.search type ' + type + ', property ' + property + ', value ' + value + ' got back ' + results);
          } else {
            results.forEach(function(result) {
              return DB.lru.set(result.id, result);
            });
          }
          return q.resolve(results);
        });
      });
      return q;
    };

    DB.get = function(type, ids) {
      var bam, q;
      if (debug) {
        console.log('DB.get called for type "' + type + '" and ids "' + ids + '"');
      }
      if (!ids.length) {
        ids = [ids];
      }
      q = defer();
      bam = false;
      all(ids.map(function(id) {
        var err, error, p, rv;
        try {
          rv = DB.lru.get(id);
        } catch (error) {
          err = error;
          console.log('************* ERROR ');
          console.dir(arguments);
          console.dir(err);
        }
        p = defer();
        if (!rv) {
          if (typeof id === 'object') {
            console.log('DB.get was served an object instead of an id!!!');
            console.dir(id);
            q.resolve(null);
          } else {
            DB.getDataStore().then(function(store) {
              if (debug) {
                console.log('DB.get calling datastore ' + store);
              }
              return store.get(type, id, function(result) {
                if (!result) {
                  if (debug) {
                    console.log('DB.get for type ' + type + ' and id ' + id + ' got back ' + result);
                  }
                } else {
                  DB.lru.set(id, result);
                }
                if (!bam) {
                  p.resolve(result);
                }
                return bam = true;
              });
            });
          }
        } else {
          if (!bam) {
            p.resolve(rv);
          }
          bam = true;
        }
        return p;
      })).then(function(result) {
        return q.resolve(result);
      }, function(err) {
        console.log('DB.get ERROR: ' + err);
        console.dir(err);
        return q.resolve(null);
      });
      return q;
    };

    DB.set = function(type, obj, cb) {
      if (obj) {
        DB.lru.set(obj.id, obj);
        return DB.getDataStore().then(function(store) {
          return store.set(type, obj, function(res) {
            if (cb) {
              return cb(res);
            }
          });
        });
      } else {
        return cb();
      }
    };

    DB.remove = function(obj, cb) {
      DB.lru.del(obj.id);
      return DB.getDataStore().then(function(store) {
        return store.remove(obj.type, obj, function(res) {
          if (cb) {
            return cb(res);
          }
        });
      });
    };

    return DB;

  })();

  module.exports = DB;

}).call(this);

//# sourceMappingURL=DB.js.map
