// Generated by CoffeeScript 1.8.0
(function() {
  var ClientEndpoints, DB, ObjectManager, authMgr, defer, e, error, objStore, util,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  util = require('util');

  defer = require('node-promise').defer;

  e = require('./../EventManager');

  DB = require('./DB');

  ClientEndpoints = require('./ClientEndpoints');

  authMgr = require('./../AuthenticationManager');

  objStore = require('./OStore');

  error = require('./../Error').error;

  ObjectManager = (function() {
    function ObjectManager(messageRouter) {
      this.messageRouter = messageRouter;
      this.onRegisterForUpdatesOn = __bind(this.onRegisterForUpdatesOn, this);
      this.onUpdateObject = __bind(this.onUpdateObject, this);
      this.setup = __bind(this.setup, this);
      console.log('********** new objectManager created ***********');
      this.games = [];
    }

    ObjectManager.prototype.setup = function() {
      this.messageRouter.addTarget('registerForUpdatesOn', 'obj', this.onRegisterForUpdatesOn);
      return this.messageRouter.addTarget('updateObject', 'obj', this.onUpdateObject);
    };

    ObjectManager.prototype.onUpdateObject = function(msg) {
      console.log('onUpdateObject called for ' + msg.obj.type + ' - ' + msg.obj.id);
      return objStore.getObj(msg.obj.id, msg.obj.type).then((function(_this) {
        return function(obj) {
          var newval;
          console.log('gameMgr::onUpdateObject DB found object' + obj.id);
          if (obj) {
            newval = {};
            if (authMgr.canPlayerWriteToThisObject(obj, msg.player)) {
              objStore.updateObj(msg.obj);
              DB.set(obj.type, newval);
              return msg.replyFunc(e.event(e.general.SUCCESS, 0, e.gamemanager.UPDATE_OBJECT_SUCCESS, msg.obj.id));
            } else {
              return msg.replyFunc(e.event(e.general.NOT_ALLOWED, 0, e.gamemanager.UPDATE_OBJECT_FAIL, msg.obj.id));
            }
          } else {
            return msg.replyFunc(e.event(e.general.NOT_ALLOWED, 0, e.gamemanager.NO_SUCH_OBJECT, msg.obj.id));
          }
        };
      })(this));
    };

    ObjectManager.prototype.onRegisterForUpdatesOn = function(msg) {
      console.log('onRegisterForUpdatesOn called for ' + msg.obj.type + ' ' + msg.obj.id);
      console.dir(msg);
      return objStore.getObj(msg.obj.id, msg.obj.type).then((function(_this) {
        return function(obj) {
          var listenerId;
          if (obj) {
            if (authMgr.canPlayerReadFromThisObject(obj, msg.player)) {
              listenerId = objStore.addListenerFor(msg.obj.id, msg.obj.type, function(uobj) {
                console.log('--------------------- sending update of object ' + msg.obj.id + ' type ' + msg.obj.type + ' to client');
                if (!uobj) {
                  console.dir(uobj);
                }
                return ClientEndpoints.sendToEndpoint(msg.client, e.event(e.general.SUCCESS, 0, e.gamemanager.OBJECT_UPDATE, uobj.toClient()));
              });
              console.log('replying with listenerId ' + listenerId);
              return msg.replyFunc(e.event(e.general.SUCCESS, 0, e.gamemanager.REGISTER_UPDATES, listenerId));
            } else {
              return msg.replyFunc(e.event(e.general.NOT_ALLOWED, 0, e.gamemanager.UPDATE_REGISTER_FAIL, obj.name));
            }
          } else {
            return msg.replyFunc(e.event(e.general.NOT_ALLOWED, 0, e.gamemanager.NO_SUCH_OBJECT, msg.obj.id));
          }
        };
      })(this), error);
    };

    return ObjectManager;

  })();

  module.exports = ObjectManager;

}).call(this);

//# sourceMappingURL=ObjectManager.js.map
