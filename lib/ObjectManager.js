// Generated by CoffeeScript 1.8.0
(function() {
  var ClientEndpoints, DB, ObjectManager, SuperModel, debug, defer, e, error, objStore, util,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  util = require('util');

  defer = require('node-promise').defer;

  SuperModel = require('./SuperModel');

  e = require('./EventManager');

  DB = require('./DB');

  ClientEndpoints = require('./ClientEndpoints');

  objStore = require('./OStore');

  error = require('./Error').error;

  debug = process.env["DEBUG"];

  ObjectManager = (function() {
    function ObjectManager(messageRouter) {
      this.messageRouter = messageRouter;
      this.onRegisterForPopulationChanges = __bind(this.onRegisterForPopulationChanges, this);
      this.onDeregisterForUpdatesOn = __bind(this.onDeregisterForUpdatesOn, this);
      this.onRegisterForUpdatesOn = __bind(this.onRegisterForUpdatesOn, this);
      this.resolveReferences = __bind(this.resolveReferences, this);
      this.onUpdateObject = __bind(this.onUpdateObject, this);
      this.getObjectPullThrough = __bind(this.getObjectPullThrough, this);
      this.expose = __bind(this.expose, this);
      this._listObjects = __bind(this._listObjects, this);
      this.getAggregateObjects = __bind(this.getAggregateObjects, this);
      this._getObject = __bind(this._getObject, this);
      this._updateObject = __bind(this._updateObject, this);
      this._deleteObject = __bind(this._deleteObject, this);
      this._createObject = __bind(this._createObject, this);
      this.onGetModelFor = __bind(this.onGetModelFor, this);
      this.onGetAccessTypesFor = __bind(this.onGetAccessTypesFor, this);
      this.onListTypes = __bind(this.onListTypes, this);
      this.registerUpdateObjectHook = __bind(this.registerUpdateObjectHook, this);
      this.setup = __bind(this.setup, this);
      this.updateObjectHooks = [];
      this.populationListeners = [];
      SuperModel.onCreate((function(_this) {
        return function(newmodel) {
          return _this.populationListeners.forEach(function(client) {
            if (ClientEndpoints.exists(client)) {
              return ClientEndpoints.sendToEndpoint(client, {
                status: e.general.SUCCESS,
                info: 'POPULATION_UPDATE',
                payload: {
                  added: newmodel.toClient()
                }
              });
            }
          });
        };
      })(this));
    }

    ObjectManager.prototype.setup = function() {
      this.messageRouter.addTarget('registerForUpdatesOn', 'obj', this.onRegisterForUpdatesOn);
      this.messageRouter.addTarget('deRegisterForUpdatesOn', 'id,listenerid', this.onDeregisterForUpdatesOn);
      this.messageRouter.addTarget('updateObject', 'obj', this.onUpdateObject);
      this.messageRouter.addTarget('listTypes', '<noargs>', this.onListTypes);
      this.messageRouter.addTarget('getModelFor', 'modelname', this.onGetModelFor);
      this.messageRouter.addTarget('getAccessTypesFor', 'modelname', this.onGetAccessTypesFor);
      return this.messageRouter.addTarget('registerForPopulationChangesFor', 'type', this.onRegisterForPopulationChanges);
    };

    ObjectManager.prototype.registerUpdateObjectHook = function(hook) {
      return this.updateObjectHooks.push(hook);
    };

    ObjectManager.prototype.onListTypes = function(msg) {
      return msg.replyFunc({
        status: e.general.SUCCESS,
        info: 'list types',
        payload: objStore.listTypes()
      });
    };

    ObjectManager.prototype.onGetAccessTypesFor = function(msg) {
      var rv;
      if (msg.modelname) {
        rv = {
          create: this.messageRouter.authMgr.canUserCreateThisObject(msg.modelname, msg.user),
          read: this.messageRouter.authMgr.canUserReadFromThisObject(msg.modelname, msg.user),
          write: this.messageRouter.authMgr.canUserWriteToThisObject(msg.modelname, msg.user),
          list: this.messageRouter.authMgr.canUserListTheseObjects(msg.modelname, msg.user)
        };
        return msg.replyFunc({
          status: e.general.SUCCESS,
          info: 'access types for ' + msg.modelname,
          payload: rv
        });
      } else {
        return msg.replyFunc({
          status: e.general.FAILURE,
          info: "getAccessTypesFor missing parameter",
          payload: null
        });
      }
    };

    ObjectManager.prototype.onGetModelFor = function(msg) {
      if (msg.modelname) {
        return this.messageRouter.resolver.resolve(msg.modelname, (function(_this) {
          return function(path) {
            var model, rv;
            if (debug) {
              console.log('onGetModelFor ' + msg.modelname + ' got back require path ' + path);
            }
            model = require(path);
            if (debug) {
              console.log('got model resolved to');
            }
            if (debug) {
              console.dir(model);
            }
            rv = [];
            model.model.forEach(function(property) {
              if (property["public"]) {
                return rv.push(property);
              }
            });
            return msg.replyFunc({
              status: e.general.SUCCESS,
              info: 'get model',
              payload: rv
            });
          };
        })(this));
      } else {
        return msg.replyFunc({
          status: e.general.FAILURE,
          info: "getModelFor missing parameter",
          payload: null
        });
      }
    };

    ObjectManager.prototype._createObject = function(msg) {
      if (msg.obj.type) {
        if (this.messageRouter.authMgr.canUserCreateThisObject(msg.obj.type, msg.user)) {
          msg.obj.createdAt = Date.now();
          msg.obj.createdBy = msg.user.id;
          return SuperModel.resolver.createObjectFrom(msg.obj).then((function(_this) {
            return function(o) {
              o.serialize();
              return msg.replyFunc({
                status: e.general.SUCCESS,
                info: 'new ' + msg.obj.type,
                payload: o
              });
            };
          })(this));
        } else {
          return msg.replyFunc({
            status: e.general.NOT_ALLOWED,
            info: 'not allowed to create objects of that type',
            payload: msg.obj.type
          });
        }
      } else {
        return msg.replyFunc({
          status: e.general.FAILURE,
          info: '_createObject missing parameter',
          payload: null
        });
      }
    };

    ObjectManager.prototype._deleteObject = function(msg) {
      if (msg.obj && msg.obj.type && msg.obj.id) {
        return objStore.getObject(msg.obj.id, msg.obj.type).then((function(_this) {
          return function(obj) {
            if (obj) {
              if (_this.messageRouter.authMgr.canUserWriteToThisObject(obj, msg.user)) {
                return DB.remove(obj, function(removestatus) {
                  _this.populationListeners.forEach(function(client) {
                    if (ClientEndpoints.exists(client)) {
                      ClientEndpoints.sendToEndpoint(client, {
                        status: e.general.SUCCESS,
                        info: 'POPULATION_UPDATE',
                        payload: {
                          removed: obj.toClient()
                        }
                      });
                    }
                    return objStore.removeObject(obj);
                  });
                  return msg.replyFunc({
                    status: e.general.SUCCESS,
                    info: 'delete object',
                    payload: obj.id
                  });
                });
              } else {
                return msg.replyFunc({
                  status: e.general.NOT_ALLOWED,
                  info: 'not allowed to delete object',
                  payload: msg.obj.id
                });
              }
            } else {
              console.log('No object found with id ' + msg.obj.id);
              console.dir(objStore.objects.map(function(o) {
                return o.type === msg.obj.type;
              }));
              return msg.replyFunc({
                status: e.general.NOT_ALLOWED,
                info: e.gamemanager.NO_SUCH_OBJECT,
                payload: msg.obj.id
              });
            }
          };
        })(this));
      } else {
        return msg.replyFunc({
          status: e.general.FAILURE,
          info: '_deleteObject missing parameter',
          payload: null
        });
      }
    };

    ObjectManager.prototype._updateObject = function(msg) {
      return this.onUpdateObject(msg);
    };

    ObjectManager.prototype._getObject = function(msg) {
      var id;
      if (debug) {
        console.log('_getObject called for type ' + msg.type);
      }
      if (msg.type && msg.obj.id) {
        id = msg.obj.id;
        if (id.indexOf && id.indexOf('all_') > -1) {
          return this.getAggregateObjects(msg);
        } else {
          return this.getObjectPullThrough(id, msg.obj.type).then((function(_this) {
            return function(obj) {
              if (obj) {
                if (_this.messageRouter.authMgr.canUserReadFromThisObject(obj, msg.user)) {
                  return msg.replyFunc({
                    status: e.general.SUCCESS,
                    info: 'get object',
                    payload: obj.toClient()
                  });
                } else {
                  console.log('_getObject got NOT ALLOWED for user ' + msg.user.id + ' for ' + msg.type + ' id ' + obj.id);
                  return msg.replyFunc({
                    status: e.general.NOT_ALLOWED,
                    info: 'not allowed to read from that object',
                    payload: id
                  });
                }
              } else {
                console.log('No object found with id ' + id);
                console.dir(objStore.objects.map(function(o) {
                  return o.type === msg.obj.type;
                }));
                return msg.replyFunc({
                  status: e.general.NOT_ALLOWED,
                  info: 'no such object',
                  payload: msg.obj.id
                });
              }
            };
          })(this));
        }
      } else {
        return msg.replyFunc({
          status: e.general.FAILURE,
          info: '_getObject missing parameter',
          payload: null
        });
      }
    };

    ObjectManager.prototype.getAggregateObjects = function(msg) {
      var obj, rv;
      if (!this.messageRouter.authMgr.canUserListTheseObjects(msg.type, msg.user)) {
        return msg.replyFunc({
          status: e.general.NOT_ALLOWED,
          info: 'not allowed to list objects of type ' + msg.type,
          payload: msg.type
        });
      } else {
        rv = objStore.listObjectsByType(msg.obj.type);
        obj = {
          id: msg.obj.id,
          list: rv
        };
        return msg.replyFunc({
          status: e.general.SUCCESS,
          info: 'get object',
          payload: obj
        });
      }
    };

    ObjectManager.prototype._listObjects = function(msg) {
      console.log('listObjects called for type ' + msg.type);
      if (typeof msg.type !== 'undefined') {
        if (this.messageRouter.authMgr.canUserListTheseObjects(msg.type, msg.user) === false) {
          return msg.replyFunc({
            status: e.general.NOT_ALLOWED,
            info: 'not allowed to list objects of type ' + msg.type,
            payload: msg.type
          });
        } else {
          return DB.all(msg.type, (function(_this) {
            return function(records) {
              var count, rv;
              rv = [];
              console.log('found ' + records.length + ' objects to return');
              count = records.length;
              return records.forEach(function(record) {
                return _this.messageRouter.resolver.createObjectFrom(record).then(function(o) {
                  if (debug) {
                    console.log('resolved object ' + o.id + ' count = ' + count);
                  }
                  rv.push(o.toClient());
                  if (--count === 0) {
                    return msg.replyFunc({
                      status: e.general.SUCCESS,
                      info: 'list objects',
                      payload: rv
                    });
                  }
                });
              });
            };
          })(this));
        }
      } else {
        return msg.replyFunc({
          status: e.general.FAILURE,
          info: '_listObjects missing parameter',
          payload: null
        });
      }
    };

    ObjectManager.prototype.expose = function(type) {
      objStore.types[type] = type;
      this.messageRouter.addTarget('_create' + type, 'obj', (function(_this) {
        return function(msg) {
          msg.type = type;
          return _this._createObject(msg);
        };
      })(this));
      this.messageRouter.addTarget('_delete' + type, 'obj', (function(_this) {
        return function(msg) {
          msg.type = type;
          return _this._deleteObject(msg);
        };
      })(this));
      this.messageRouter.addTarget('_update' + type, 'obj', (function(_this) {
        return function(msg) {
          msg.type = type;
          return _this._updateObject(msg);
        };
      })(this));
      this.messageRouter.addTarget('_get' + type, 'obj', (function(_this) {
        return function(msg) {
          msg.type = type;
          return _this._getObject(msg);
        };
      })(this));
      return this.messageRouter.addTarget('_list' + type + 's', '<noargs>', (function(_this) {
        return function(msg) {
          msg.type = type;
          return _this._listObjects(msg);
        };
      })(this));
    };

    ObjectManager.prototype.getObjectPullThrough = function(id, type) {
      var q;
      q = defer();
      if (!type) {
        console.log('Objectmanager::getObjectPullThrough called with null type.');
        q.resolve(null);
      } else {
        objStore.getObject(id, type).then((function(_this) {
          return function(o) {
            if (!o) {
              if (debug) {
                console.log('getObjectPullThrough did not find object type ' + type + ' id ' + id + ' in ostore, getting from db');
              }
              return DB.get(type, [id]).then(function(record) {
                return _this.messageRouter.resolver.createObjectFrom(record).then(function(oo) {
                  return q.resolve(oo);
                });
              });
            } else {
              return q.resolve(o);
            }
          };
        })(this));
      }
      return q;
    };

    ObjectManager.prototype.onUpdateObject = function(msg) {
      console.log('onUpdateObject called for ' + msg.obj.type + ' - ' + msg.obj.id);
      return objStore.getObject(msg.obj.id, msg.obj.type).then((function(_this) {
        return function(obj) {
          var k, v, _ref;
          if (obj) {
            if (_this.messageRouter.authMgr.canUserWriteToThisObject(obj, msg.user)) {
              if (debug) {
                console.log('can write');
              }
              _ref = msg.obj;
              for (k in _ref) {
                v = _ref[k];
                obj[k] = v;
              }
              return _this.resolveReferences(obj, obj.constructor.model).then(function(robj) {
                if (debug) {
                  console.log('found object');
                }
                if (debug) {
                  console.log('persisting ' + obj.id + ' type ' + obj.type + ' in db. modifiedAt = ' + obj.modifiedAt);
                }
                return obj.serialize(robj).then(function() {
                  var record;
                  record = obj.getRecord();
                  _this.updateObjectHooks.forEach(function(hook) {
                    return hook(record);
                  });
                  return msg.replyFunc({
                    status: e.general.SUCCESS,
                    info: e.gamemanager.UPDATE_OBJECT_SUCCESS,
                    payload: msg.obj.id
                  });
                });
              });
            } else {
              return msg.replyFunc({
                status: e.general.NOT_ALLOWED,
                info: e.gamemanager.UPDATE_OBJECT_FAIL,
                payload: msg.obj.id
              });
            }
          } else {
            console.log('No object of type ' + msg.obj.type + ' found with id ' + msg.obj.id);
            return msg.replyFunc({
              status: e.general.NOT_ALLOWED,
              info: e.gamemanager.NO_SUCH_OBJECT,
              payload: msg.obj.id
            });
          }
        };
      })(this));
    };

    ObjectManager.prototype.resolveReferences = function(record, model) {
      var checkFinished, count, q, rv;
      if (debug) {
        console.log('resolveReferences model is ');
      }
      if (debug) {
        console.dir(model);
      }
      rv = {
        id: record.id
      };
      q = defer();
      count = model.length;
      checkFinished = function() {
        if (debug) {
          console.log('checkFinished count = ' + count);
        }
        if (--count === 0) {
          return q.resolve(rv);
        }
      };
      model.forEach((function(_this) {
        return function(property) {
          var acount, arr, harr, hcount, resolvedarr, resolvedhash;
          console.log('going through array property ' + property.name);
          if (property.array) {
            resolvedarr = [];
            arr = record[property.name] || [];
            if (debug) {
              console.dir(arr);
            }
            acount = arr.length;
            if (acount === 0) {
              rv[property.name] = [];
              return checkFinished();
            } else {
              return arr.forEach(function(id) {
                if (debug) {
                  console.log('attempting to get array object type ' + property.type + ' id ' + id);
                }
                return _this.getObjectPullThrough(id, property.type).then(function(o) {
                  resolvedarr.push(o);
                  if (debug) {
                    console.log('adding array reference ' + o.id + ' name ' + o.name);
                  }
                  if (--acount === 0) {
                    rv[property.name] = resolvedarr;
                    return checkFinished();
                  }
                });
              });
            }
          } else if (property.hashtable) {
            if (debug) {
              console.log('going through hashtable property ' + property.name);
            }
            resolvedhash = {};
            harr = record[property.name] || [];
            hcount = harr.length;
            if (hcount === 0) {
              rv[property.name] = [];
              return checkFinished();
            } else {
              return harr.forEach(function(id) {
                return _this.getObjectPullThrough(id, property.type).then(function(o) {
                  resolvedhash[o.name] = o;
                  if (debug) {
                    console.log('adding hashtable reference ' + o.id + ' name ' + o.name);
                  }
                  if (--hcount === 0) {
                    rv[property.name] = resolvedhash;
                    return checkFinished();
                  }
                });
              });
            }
          } else {
            if (debug) {
              console.log('resolveReference adding direct reference ' + property.name);
            }
            rv[property.name] = record[property.name];
            return checkFinished();
          }
        };
      })(this));
      return q;
    };

    ObjectManager.prototype.onRegisterForUpdatesOn = function(msg) {
      if (debug) {
        console.dir(msg);
      }
      if (msg.obj || !msg.obj.id || !msg.obj.type) {
        if (debug) {
          console.log('onRegisterForUpdatesOn called for ' + msg.obj.type + ' ' + msg.obj.id);
        }
        return objStore.getObject(msg.obj.id, msg.obj.type).then((function(_this) {
          return function(obj) {
            var listenerId, rememberedListenerId;
            if (obj && obj.id) {
              if (_this.messageRouter.authMgr.canUserReadFromThisObject(obj, msg.user)) {
                rememberedListenerId = void 0;
                listenerId = objStore.addListenerFor(msg.obj.id, msg.obj.type, function(uobj) {
                  var toclient;
                  if (debug) {
                    console.log('--------------------- sending update of object ' + msg.obj.id + ' type ' + msg.obj.type + ' to client');
                  }
                  toclient = uobj.toClient();
                  if (debug) {
                    console.dir(toclient);
                  }
                  if (ClientEndpoints.exists(msg.client)) {
                    return ClientEndpoints.sendToEndpoint(msg.client, {
                      status: e.general.SUCCESS,
                      info: 'OBJECT_UPDATE',
                      payload: toclient
                    });
                  } else {
                    console.log('removing dangling endpoint from object updates for obj id ' + msg.id + ' and listenerId ' + rememberedListenerId);
                    return objStore.removeListenerFor(msg.id, rememberedListenerId);
                  }
                });
                rememberedListenerId = listenerId;
                ClientEndpoints.onDisconnect(function(adr) {
                  if (adr === msg.client) {
                    return objStore.removeListenerFor(msg.obj.id, listenerId);
                  }
                });
                if (debug) {
                  console.log('listenerid ' + listenerId + ' added for updates on object ' + obj.name + ' [' + obj.id + ']');
                }
                return msg.replyFunc({
                  status: e.general.SUCCESS,
                  info: e.gamemanager.REGISTER_UPDATES,
                  payload: listenerId
                });
              } else {
                return msg.replyFunc({
                  status: e.general.NOT_ALLOWED,
                  info: e.gamemanager.UPDATE_REGISTER_FAIL,
                  payload: msg.obj.id
                });
              }
            } else {
              if (debug) {
                console.log('User mot allowed getting updates (read) object:');
              }
              if (debug) {
                console.dir(obj);
              }
              return msg.replyFunc({
                status: e.general.NOT_ALLOWED,
                info: e.gamemanager.NO_SUCH_OBJECT,
                payload: msg.obj.id
              });
            }
          };
        })(this), error);
      } else {
        return msg.replyFunc({
          status: e.general.FAILURE,
          info: 'onRegisterForUpdatesOn missing parameter',
          payload: null
        });
      }
    };

    ObjectManager.prototype.onDeregisterForUpdatesOn = function(msg) {
      if (debug) {
        console.log('onDeregisterForUpdatesOn called for id ' + msg.id + ' and listener id ' + msg.listenerid);
      }
      if (msg.id && msg.listenerid && msg.type) {
        objStore.removeListenerFor(msg.id, msg.listenerid);
        return msg.replyFunc({
          status: e.general.SUCCESS,
          info: 'deregistered listener for obejct',
          payload: msg.id
        });
      } else {
        return msg.replyFunc({
          status: e.general.FAILURE,
          info: 'onDeregisterForUpdatesOn missing parameter',
          payload: null
        });
      }
    };

    ObjectManager.prototype.onRegisterForPopulationChanges = function(msg) {
      if (msg.type) {
        this.populationListeners.push(msg.client);
        msg.replyFunc({
          status: e.general.SUCCESS,
          info: 'registered for population changes for type ' + msg.type,
          payload: type
        });
        return ClientEndpoints.onDisconnect((function(_this) {
          return function(adr) {
            var idx;
            if (adr === msg.client) {
              idx = -1;
              _this.populationListeners.forEach(function(client, i) {
                if (client === msg.client) {
                  return idx = i;
                }
              });
              return _this.populationListeners.splice(i, 1);
            }
          };
        })(this));
      } else {
        return msg.replyFunc({
          status: e.general.FAILURE,
          info: 'onRegisterForPopulationChanges missing parameter',
          payload: null
        });
      }
    };

    return ObjectManager;

  })();

  module.exports = ObjectManager;

}).call(this);

//# sourceMappingURL=ObjectManager.js.map
