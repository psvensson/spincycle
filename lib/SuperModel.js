// Generated by CoffeeScript 1.8.0
(function() {
  var DB, OMgr, SuperModel, all, defer, error, uuid,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  defer = require('node-promise').defer;

  all = require('node-promise').allOrNone;

  uuid = require('node-uuid');

  OMgr = require('./OStore');

  DB = require('./DB');

  error = require('./Error').error;

  SuperModel = (function() {
    function SuperModel() {
      this.insertObj = __bind(this.insertObj, this);
      this.loadFromIds = __bind(this.loadFromIds, this);
      this.serialize = __bind(this.serialize, this);
    }

    SuperModel.prototype.serialize = function() {
      var record;
      record = this.getRecord();
      OMgr.storeObj(this);
      return DB.set(this.type, record);
    };

    SuperModel.prototype.loadFromIds = function(resolvearr) {
      var alldone, allpromises, q;
      alldone = defer();
      allpromises = [];
      if (!resolvearr) {
        q = defer();
        allpromises.push(q);
        q.resolve();
      } else {
        resolvearr.forEach((function(_this) {
          return function(resolveobj) {
            var r;
            r = defer();
            allpromises.push(r);
            if (!resolveobj.ids) {
              _this[resolveobj.name] = [];
              resolveobj.ids = [];
              r.resolve({});
            }
            if (typeof resolveobj.ids === 'string') {
              resolveobj.ids = [resolveobj.ids];
            }
            if (resolveobj.ids.length > 1) {
              _this[resolveobj.name] = [];
            }
            return resolveobj.ids.forEach(function(id) {
              return OMgr.getObj(id, resolveobj.type).then(function(obj) {
                _this.insertObj(resolveobj, obj);
                return r.resolve(obj);
              });
            });
          };
        })(this));
      }
      all(allpromises, error).then(function(results) {
        return alldone.resolve(results);
      }, error);
      return alldone;
    };

    SuperModel.prototype.insertObj = function(ro, o) {
      if (ro.ids.length > 1) {
        return this[ro.name].push(o);
      } else {
        return this[ro.name] = o;
      }
    };

    return SuperModel;

  })();

  module.exports = SuperModel;

}).call(this);

//# sourceMappingURL=SuperModel.js.map
