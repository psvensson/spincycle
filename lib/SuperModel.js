// Generated by CoffeeScript 1.9.1
(function() {
  var DB, OMgr, ResolveModule, SuperModel, all, debug, defer, error, resolver, uuid,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  defer = require('node-promise').defer;

  all = require('node-promise').allOrNone;

  uuid = require('node-uuid');

  OMgr = require('./OStore');

  DB = require('./DB');

  error = require('./Error').error;

  ResolveModule = require('./ResolveModule');

  resolver = new ResolveModule();

  debug = process.env["DEBUG"];

  SuperModel = (function() {
    SuperModel.resolver = resolver;

    SuperModel.oncreatelisteners = [];

    SuperModel.onCreate = function(cb) {
      return SuperModel.oncreatelisteners.push(cb);
    };

    SuperModel.prototype._getRecord = function() {
      var rv;
      rv = this.getRecord();
      rv._rev = this._rev;
      return rv;
    };

    function SuperModel(record1) {
      var missing, q;
      this.record = record1 != null ? record1 : {};
      this.insertObj = bind(this.insertObj, this);
      this.resolveObj = bind(this.resolveObj, this);
      this.loadFromIds = bind(this.loadFromIds, this);
      this.unPrettify = bind(this.unPrettify, this);
      this.prettyPrint = bind(this.prettyPrint, this);
      this.serialize = bind(this.serialize, this);
      this.toClient = bind(this.toClient, this);
      this.getRecord = bind(this.getRecord, this);
      this._getRecord = bind(this._getRecord, this);
      this.id = this.record.id || uuid.v4();
      this.record = this.unPrettify(this.record);
      missing = true;
      this.constructor.model.forEach(function(mp) {
        if (mp.name === 'createdAt' || mp.name === 'createdBy') {
          return missing = false;
        }
      });
      if (missing) {
        this.constructor.model.push({
          name: 'createdAt',
          "public": true,
          value: 'createdAt'
        });
        this.constructor.model.push({
          name: 'modifiedAt',
          "public": true,
          value: 'modifiedAt'
        });
        this.constructor.model.push({
          name: 'createdBy',
          "public": true,
          value: 'createdBy'
        });
        SuperModel.oncreatelisteners.forEach(function(listener) {
          return listener(this);
        });
      }
      this.createdAt = this.createdAt || Date.now();
      this.type = this.constructor.type;
      q = defer();
      OMgr.storeObject(this);
      if (this.record._rev) {
        this._rev = this.record._rev;
      }
      this.loadFromIds(this.constructor.model).then((function(_this) {
        return function() {
          if (!_this.createdAt) {
            _this.createdAt = Date.now();
          }
          if (_this.postCreate) {
            return _this.postCreate(q);
          } else {
            return q.resolve(_this);
          }
        };
      })(this), error);
      return q;
    }

    SuperModel.prototype.getRecord = function() {
      return this._getRecord(this, this.constructor.model, this.record);
    };

    SuperModel.prototype._getRecord = function(me, model, record) {
      var rv;
      rv = {};
      if (this._rev) {
        rv._rev = this._rev;
      }
      model.forEach(function(v) {
        var ha, hk, hv, k, marr, ref, varr;
        k = v.name;
        if ((v.value && v.value !== 0) && v.type) {
          if (debug) {
            console.log('getRecord accessing property ' + k + ' of object ' + this.type + ' -> ' + me[k]);
          }
          return rv[k] = (ref = me[k]) != null ? ref.id : void 0;
        } else if ((v.value && v.value !== 0) && !v.type) {
          rv[k] = me[v.value];
          if (!rv[k] && rv[k] !== 0) {
            return rv[k] = record[k];
          }
        } else if (v.hashtable) {
          varr = [];
          ha = me[v.name] || [];
          for (hk in ha) {
            hv = ha[hk];
            varr.push(hv.id);
          }
          return rv[k] = varr;
        } else if (v.array) {
          varr = [];
          marr = me[v.name] || [];
          marr.forEach(function(hv) {
            if (hv && hv !== null && hv !== 'null') {
              if (debug) {
                console.log('adding array element ' + hv.id);
              }
              if (debug) {
                console.dir(hv);
              }
              return varr.push(hv.id);
            }
          });
          return rv[k] = varr;
        } else {
          if (debug) {
            return console.log('**************** AAAUAGHH!!! property ' + k + ' was not resolved in SuperMOde::_getRecord');
          }
        }
      });
      rv.id = this.id;
      rv.type = this.constructor.type;
      return rv;
    };

    SuperModel.prototype.toClient = function() {
      var k, r, ra, rv, v;
      if (debug) {
        console.log('---------------------------------------- toClient -----------------------------------------------');
      }
      if (debug) {
        console.dir(this);
      }
      r = this.getRecord();
      ra = this.constructor.model;
      rv = {};
      for (k in r) {
        v = r[k];
        ra.forEach((function(_this) {
          return function(el) {
            var res;
            if (el.name === k && k !== 'record' && el["public"]) {
              res = _this.prettyPrint(k, v);
              if (debug) {
                console.log('toClient ' + k + ' -> ' + res);
              }
              return rv[k] = res;
            }
          };
        })(this));
      }
      rv.id = this.id;
      rv.type = this.constructor.type;
      return rv;
    };

    SuperModel.prototype.serialize = function(updatedObj) {
      var q, record;
      q = defer();
      if (!this._serializing) {
        this._serializing = true;
        OMgr.storeObject();
        if (updatedObj) {
          delete updatedObj.record;
        }
        if (updatedObj) {
          OMgr.updateObj(updatedObj);
        }
        record = this.getRecord();
        if (record.record) {
          delete record.record;
        }
        if (this._rev) {
          record._rev = this._rev;
        }
        DB.set(this.constructor.type, record).then((function(_this) {
          return function() {
            _this._serializing = false;
            return q.resolve(_this);
          };
        })(this));
      } else {
        q.resolve(this);
      }
      return q;
    };

    SuperModel.prototype.prettyPrint = function(name, value) {
      var rv;
      rv = value;
      return rv;
    };

    SuperModel.prototype.unPrettify = function(record) {
      return record;
    };

    SuperModel.prototype.loadFromIds = function(model) {
      var alldone, allpromises, q;
      if (debug) {
        console.log('------------------------------------------------> loadfromIds called for ' + this.constructor.type + ' ' + this.id + ' ' + model.length + ' properties');
      }
      alldone = defer();
      allpromises = [];
      if (!model || model.length === 0) {
        q = defer();
        allpromises.push(q);
        q.resolve();
      } else {
        model.forEach((function(_this) {
          return function(robj) {
            return (function(resolveobj) {
              var count, ids, r;
              r = defer();
              allpromises.push(r);
              if (resolveobj.value) {
                if (resolveobj.type) {
                  if (_this.record[resolveobj.value]) {
                    return _this.resolveObj(resolveobj, _this.record[resolveobj.value], r, 0);
                  } else {
                    _this[resolveobj.name] = null;
                    return r.resolve(_this[resolveobj.name]);
                  }
                } else {
                  _this[resolveobj.name] = _this.record[resolveobj.value] || resolveobj["default"];
                  return r.resolve(_this[resolveobj.name]);
                }
              } else {
                if (resolveobj.array === true) {
                  _this[resolveobj.name] = [];
                }
                if (resolveobj.hashtable === true) {
                  _this[resolveobj.name] = {};
                }
                ids = _this.record[resolveobj.ids];
                if (!ids || typeof ids === 'undefined' || ids === 'undefined') {
                  ids = [];
                  return r.resolve(null);
                } else {
                  if (typeof ids === 'string') {
                    ids = [ids];
                  }
                  ids = ids.filter(function(ii) {
                    return ii && ii !== null && ii !== "null" && ii !== "undefined";
                  });
                  if (debug) {
                    console.log('resolveobjds ' + resolveobj.name + ' (' + (typeof ids) + ') ids length are.. ' + ids.length);
                  }
                  if (debug) {
                    console.dir(ids);
                  }
                  count = ids.length;
                  if (count === 0) {
                    return r.resolve(null);
                  } else {
                    return ids.forEach(function(_id) {
                      return (function(id) {
                        if (debug) {
                          console.log('SuperModel loadFromIds trying to get ' + resolveobj.name + ' with id ' + id);
                        }
                        return _this.resolveObj(resolveobj, id, r, --count);
                      })(_id);
                    });
                  }
                }
              }
            })(robj);
          };
        })(this));
      }
      all(allpromises, error).then((function(_this) {
        return function(results) {
          if (debug) {
            console.log('<------------------------------------------------ loadfromIds done for ' + _this.constructor.type + ' ' + _this.id + ' ' + model.length + ' properties');
          }
          return alldone.resolve(results);
        };
      })(this), error);
      return alldone;
    };

    SuperModel.prototype.resolveObj = function(resolveobj, id, r, count) {
      return OMgr.getObject(id, resolveobj.type).then((function(_this) {
        return function(oo) {
          if (oo) {
            _this.insertObj(resolveobj, oo);
            if (count === 0) {
              return r.resolve(oo);
            }
          } else {
            return DB.get(resolveobj.type, [id]).then(function(record) {
              if (!record) {
                if (count === 0) {
                  return r.resolve(null);
                }
              } else {
                return SuperModel.resolver.createObjectFrom(record).then(function(obj) {
                  if (!obj) {
                    console.log(' Hmm. Missing object reference. Sad Face.');
                    if (count === 0) {
                      return r.resolve(null);
                    }
                  } else {
                    _this.insertObj(resolveobj, obj);
                    if (count === 0) {
                      return r.resolve(obj);
                    }
                  }
                }, error);
              }
            }, error);
          }
        };
      })(this), error);
    };

    SuperModel.prototype.insertObj = function(ro, o) {
      if (ro.array === true) {
        this[ro.name].push(o);
      } else if (ro.hashtable === true) {
        this[ro.name][o.name] = o;
      } else {
        this[ro.name] = o;
      }
      return OMgr.storeObject(o);
    };

    return SuperModel;

  })();

  module.exports = SuperModel;

}).call(this);

//# sourceMappingURL=SuperModel.js.map
