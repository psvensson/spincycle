// Generated by CoffeeScript 1.10.0
(function() {
  var DB, OMgr, ResolveModule, SuperModel, all, debug, defer, error, resolver, uuid,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  defer = require('node-promise').defer;

  all = require('node-promise').allOrNone;

  uuid = require('node-uuid');

  OMgr = require('./OStore');

  DB = require('./DB');

  error = require('./Error').error;

  ResolveModule = require('./ResolveModule');

  resolver = new ResolveModule();

  debug = process.env["DEBUG"];

  SuperModel = (function() {
    SuperModel.resolver = resolver;

    SuperModel.prototype.resolver = resolver;

    SuperModel.oncreatelisteners = [];

    SuperModel.onCreate = function(cb) {
      return SuperModel.oncreatelisteners.push(cb);
    };

    SuperModel.prototype._getRecord = function() {
      var rv;
      rv = this.getRecord();
      rv._rev = this._rev;
      return rv;
    };

    function SuperModel(record1) {
      var missing, q;
      this.record = record1 != null ? record1 : {};
      this.insertObj = bind(this.insertObj, this);
      this.createObjectFromRecord = bind(this.createObjectFromRecord, this);
      this.resolveObj = bind(this.resolveObj, this);
      this.loadFromIds = bind(this.loadFromIds, this);
      this.unPrettify = bind(this.unPrettify, this);
      this.prettyPrint = bind(this.prettyPrint, this);
      this.serialize = bind(this.serialize, this);
      this.toClient = bind(this.toClient, this);
      this.getRecord = bind(this.getRecord, this);
      this._getRecord = bind(this._getRecord, this);
      this.id = this.record.id || uuid.v4();
      this.record = this.unPrettify(this.record);
      missing = true;
      this.constructor.model.forEach(function(mp) {
        if (mp.name === 'createdAt' || mp.name === 'createdBy') {
          return missing = false;
        }
      });
      if (missing) {
        this.constructor.model.push({
          name: 'createdAt',
          "public": true,
          value: 'createdAt'
        });
        this.constructor.model.push({
          name: 'modifiedAt',
          "public": true,
          value: 'modifiedAt'
        });
        this.constructor.model.push({
          name: 'createdBy',
          "public": true,
          value: 'createdBy'
        });
      }
      this.type = this.constructor.type;
      q = defer();
      OMgr.storeObject(this);
      if (this.record._rev) {
        this._rev = this.record._rev;
      }
      this.loadFromIds(this.constructor.model).then((function(_this) {
        return function() {
          _this.createdAt = _this.createdAt || Date.now();
          _this.modifiedAt = _this.modifiedAt || Date.now();
          _this.createdBy = _this.createdBy || 'SYSTEM';
          if (!_this.record.id) {
            SuperModel.oncreatelisteners.forEach(function(listener) {
              return listener(_this);
            });
          }
          if (_this.postCreate) {
            return _this.postCreate(q);
          } else {
            return q.resolve(_this);
          }
        };
      })(this), error);
      return q;
    }

    SuperModel.prototype.getRecord = function() {
      return this._getRecord(this, this.constructor.model, this.record);
    };

    SuperModel.prototype._getRecord = function(me, model, record) {
      var rv;
      rv = {};
      if (this._rev) {
        rv._rev = this._rev;
      }
      model.forEach((function(_this) {
        return function(v) {
          var ha, hk, hv, k, marr, varr;
          k = v.name;
          if ((v.value && v.value !== 0) && v.type) {
            if (me[k]) {
              if (v.storedirectly) {
                return rv[k] = me[k]._getRecord(me[k], me[k].constructor.model, me[k].record);
              } else {
                return rv[k] = me[k].id;
              }
            }
          } else if ((v.value && v.value !== 0) && !v.type) {
            rv[k] = me[v.value];
            if (!rv[k] && rv[k] !== 0) {
              return rv[k] = record[k];
            }
          } else if (v.hashtable) {
            varr = [];
            ha = me[v.name] || [];
            for (hk in ha) {
              hv = ha[hk];
              if (v.storedirectly) {
                varr.push(hv._getRecord(hv, hv.constructor.model, hv.record));
              } else {
                varr.push(hv.id);
              }
            }
            return rv[k] = varr;
          } else if (v.array) {
            varr = [];
            marr = me[v.name] || [];
            marr.forEach(function(av) {
              if (av && av !== null && av !== 'null') {
                if (v.storedirectly) {
                  return varr.push(av._getRecord(av, av.constructor.model, av.record));
                } else {
                  return varr.push(av.id);
                }
              }
            });
            return rv[k] = varr;
          } else {
            if (debug) {
              return console.log('**************** AAAUAGHH!!! property ' + k + ' was not resolved in SuperMOde::_getRecord');
            }
          }
        };
      })(this));
      rv.id = this.id;
      rv.type = this.constructor.type;
      return rv;
    };

    SuperModel.prototype.toClient = function() {
      var k, r, ra, rv, v;
      if (debug) {
        console.log('---------------------------------------- toClient -----------------------------------------------');
      }
      r = this.getRecord();
      ra = this.constructor.model;
      rv = {};
      for (k in r) {
        v = r[k];
        ra.forEach((function(_this) {
          return function(el) {
            var res;
            if (el.name === k && k !== 'record' && el["public"]) {
              res = _this.prettyPrint(k, v);
              return rv[k] = res || el["default"];
            }
          };
        })(this));
      }
      rv.id = this.id;
      rv.type = this.constructor.type;
      return rv;
    };

    SuperModel.prototype.serialize = function(updatedObj) {
      var q, record;
      q = defer();
      if (1 === 1) {
        this._serializing = true;
        OMgr.storeObject();
        if (updatedObj) {
          delete updatedObj.record;
        }
        if (updatedObj) {
          OMgr.updateObj(updatedObj);
        }
        record = this.getRecord();
        if (record.record) {
          delete record.record;
        }
        if (this._rev) {
          record._rev = this._rev;
        }
        DB.set(this.constructor.type, record).then((function(_this) {
          return function(res) {
            _this._serializing = false;
            if (res) {
              return q.resolve(_this);
            } else {
              return q.resolve();
            }
          };
        })(this));
      } else {
        q.resolve(this);
      }
      return q;
    };

    SuperModel.prototype.prettyPrint = function(name, value) {
      var rv;
      rv = value;
      return rv;
    };

    SuperModel.prototype.unPrettify = function(record) {
      return record;
    };

    SuperModel.prototype.loadFromIds = function(model) {
      var alldone, allpromises, q;
      alldone = defer();
      allpromises = [];
      if (!model || model.length === 0) {
        q = defer();
        allpromises.push(q);
        q.resolve();
      } else {
        model.forEach((function(_this) {
          return function(robj) {
            return (function(resolveobj) {
              var count, ids, r;
              r = defer();
              allpromises.push(r);
              if (resolveobj.value) {
                if (resolveobj.type) {
                  if (resolveobj.storedirectly) {
                    return _this.createObjectFromRecord(r, resolveobj, 0, _this.record[resolveobj.value]);
                  } else {
                    if (_this.record[resolveobj.value]) {
                      return _this.resolveObj(resolveobj, _this.record[resolveobj.value], r, 0);
                    } else {
                      _this[resolveobj.name] = null;
                      return r.resolve(_this[resolveobj.name]);
                    }
                  }
                } else {
                  _this[resolveobj.name] = _this.record[resolveobj.value] || resolveobj["default"];
                  return r.resolve(_this[resolveobj.name]);
                }
              } else {
                if (resolveobj.array === true) {
                  _this[resolveobj.name] = [];
                }
                if (resolveobj.hashtable === true) {
                  _this[resolveobj.name] = {};
                }
                ids = _this.record[resolveobj.ids];
                if (!ids || typeof ids === 'undefined' || ids === 'undefined') {
                  ids = [];
                  return r.resolve();
                } else {
                  if (typeof ids === 'string') {
                    ids = [ids];
                  }
                  ids = ids.filter(function(ii) {
                    return ii && ii !== null && ii !== "null" && ii !== "undefined";
                  });
                  count = ids.length;
                  if (count === 0) {
                    return r.resolve(void 0);
                  } else {
                    return ids.forEach(function(_id) {
                      return (function(id) {
                        --count;
                        if (resolveobj.storedirectly) {
                          return _this.createObjectFromRecord(r, resolveobj, count, id);
                        } else {
                          return _this.resolveObj(resolveobj, id, r, count);
                        }
                      })(_id);
                    });
                  }
                }
              }
            })(robj);
          };
        })(this));
      }
      all(allpromises, error).then((function(_this) {
        return function(results) {
          return alldone.resolve(results);
        };
      })(this), error);
      return alldone;
    };

    SuperModel.prototype.resolveObj = function(resolveobj, id, r, count) {
      return OMgr.getObject(id, resolveobj.type).then((function(_this) {
        return function(oo) {
          if (oo) {
            _this.insertObj(resolveobj, oo);
            if (count === 0) {
              return r.resolve(oo);
            }
          } else {
            if (debug) {
              console.log('SuperModel did not find obj ' + resolveobj.name + ' [' + id + '] of type ' + resolveobj.type + ' in OStore. Getting from DB. typeof of id prop is ' + (typeof id));
            }
            return DB.get(resolveobj.type, [id]).then(function(record) {
              if (!record) {
                console.log('SuperModel::loadFromIds got back null record from DB for type ' + resolveobj.type + ' and id ' + id);
                if (count === 0) {
                  return r.resolve(null);
                }
              } else {
                if (debug) {
                  console.log('** resolveObj no obj found and no record for id ' + id + ' type ' + resolveobj.type);
                }
                return _this.createObjectFromRecord(r, resolveobj, count, record);
              }
            }, error);
          }
        };
      })(this), error);
    };

    SuperModel.prototype.createObjectFromRecord = function(r, resolveobj, count, record) {
      return SuperModel.resolver.createObjectFrom(record).then((function(_this) {
        return function(obj) {
          if (!obj) {
            if (count === 0) {
              return r.resolve(null);
            }
          } else {
            _this.insertObj(resolveobj, obj);
            if (count === 0) {
              return r.resolve(obj);
            }
          }
        };
      })(this), error);
    };

    SuperModel.prototype.insertObj = function(ro, o) {
      var property;
      OMgr.storeObject(o);
      if (ro.array === true) {
        this[ro.name].push(o);
      } else if (ro.hashtable === true) {
        if (ro.keyproperty) {
          property = ro.keyproperty;
        } else {
          property = 'name';
        }
        this[ro.name][o[property]] = o;
      } else {
        this[ro.name] = o;
      }
      return OMgr.storeObject(o);
    };

    return SuperModel;

  })();

  module.exports = SuperModel;

}).call(this);

//# sourceMappingURL=SuperModel.js.map
