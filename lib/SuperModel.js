// Generated by CoffeeScript 1.8.0
(function() {
  var DB, OMgr, ResolveModule, SuperModel, all, debug, defer, error, resolver, uuid,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  defer = require('node-promise').defer;

  all = require('node-promise').allOrNone;

  uuid = require('node-uuid');

  OMgr = require('./OStore');

  DB = require('./DB');

  error = require('./Error').error;

  ResolveModule = require('./ResolveModule');

  resolver = new ResolveModule();

  debug = process.env["DEBUG"];

  SuperModel = (function() {
    SuperModel.resolver = resolver;

    SuperModel.prototype._getRecord = function() {
      var rv;
      rv = this.getRecord();
      rv._rev = this._rev;
      return rv;
    };

    function SuperModel(record) {
      var q;
      this.record = record != null ? record : {};
      this.insertObj = __bind(this.insertObj, this);
      this.loadFromIds = __bind(this.loadFromIds, this);
      this.serialize = __bind(this.serialize, this);
      this.toClient = __bind(this.toClient, this);
      this.getRecord = __bind(this.getRecord, this);
      this._getRecord = __bind(this._getRecord, this);
      this.type = this.constructor.type;
      q = defer();
      this.id = this.record.id || uuid.v4();
      OMgr.storeObject(this);
      if (this.record._rev) {
        this._rev = this.record._rev;
      }
      this.loadFromIds(this.constructor.model).then((function(_this) {
        return function() {
          if (_this.postCreate) {
            return _this.postCreate(q);
          } else {
            return q.resolve(_this);
          }
        };
      })(this), error);
      return q;
    }

    SuperModel.prototype.getRecord = function() {
      return this._getRecord(this, this.constructor.model, this.record);
    };

    SuperModel.prototype._getRecord = function(me, model, record) {
      var rv;
      rv = {};
      if (this._rev) {
        rv._rev = this._rev;
      }
      if (!model) {
        console.dir(me);
      }
      model.forEach(function(v) {
        var hk, hv, k, varr, _ref, _ref1;
        k = v.name;
        if (v.value) {
          return rv[k] = me[v.value] || record[k];
        } else if (v.hashtable) {
          varr = [];
          _ref = me[v.name];
          for (hk in _ref) {
            hv = _ref[hk];
            varr.push(hv.id);
          }
          return rv[k] = varr;
        } else if (v.array) {
          varr = [];
          me[v.name].forEach(function(hv) {
            return varr.push(hv.id);
          });
          return rv[k] = varr;
        } else {
          if (debug) {
            console.log('getRecord accessing property ' + k + ' of object ' + this.type + ' -> ' + me[k]);
          }
          return rv[k] = (_ref1 = me[k]) != null ? _ref1.id : void 0;
        }
      });
      rv.id = this.id;
      rv.type = this.constructor.type;
      return rv;
    };

    SuperModel.prototype.toClient = function() {
      var k, r, ra, rv, v;
      r = this.getRecord();
      ra = this.constructor.model;
      rv = {};
      for (k in r) {
        v = r[k];
        ra.forEach(function(el) {
          if (el.name === k && el["public"]) {
            return rv[k] = v;
          }
        });
      }
      rv.id = this.id;
      rv.type = this.constructor.type;
      return rv;
    };

    SuperModel.prototype.serialize = function() {
      var q, record;
      q = defer();
      if (!this._serializing) {
        this._serializing = true;
        record = this.getRecord();
        if (this._rev) {
          record._rev = this._rev;
        }
        OMgr.storeObject(this);
        DB.set(this.constructor.type, record).then((function(_this) {
          return function() {
            _this._serializing = false;
            return q.resolve(_this);
          };
        })(this));
      } else {
        q.resolve(this);
      }
      return q;
    };

    SuperModel.prototype.loadFromIds = function(model) {
      var alldone, allpromises, q;
      alldone = defer();
      allpromises = [];
      if (!model || model.length === 0) {
        q = defer();
        allpromises.push(q);
        q.resolve();
      } else {
        model.forEach((function(_this) {
          return function(robj) {
            return (function(resolveobj) {
              var count, ids, r;
              r = defer();
              allpromises.push(r);
              if (resolveobj.value) {
                _this[resolveobj.name] = _this.record[resolveobj.value] || resolveobj["default"];
              }
              if (resolveobj.array === true) {
                _this[resolveobj.name] = [];
              }
              if (resolveobj.hashtable === true) {
                _this[resolveobj.name] = {};
              }
              ids = _this.record[resolveobj.ids];
              if (!ids || typeof ids === 'undefined' || ids === 'undefined') {
                ids = [];
                return r.resolve(null);
              } else {
                if (typeof ids === 'string') {
                  ids = [ids];
                }
                count = ids.length;
                if (count === 0) {
                  if (debug) {
                    console.log('no ids for ' + resolveobj.name + ' so resolving null');
                  }
                  return r.resolve(null);
                } else {
                  return ids.forEach(function(id) {
                    return OMgr.getObject(id, resolveobj.type).then(function(oo) {
                      if (oo) {
                        if (debug) {
                          console.log('found existing instance of ' + resolveobj.name + ' type ' + resolveobj.type + ' in OStore');
                        }
                        _this.insertObj(resolveobj, oo);
                        if (--count === 0) {
                          if (debug) {
                            console.log('resolving ' + resolveobj.name + ' type ' + resolveobj.type + ' immediately');
                          }
                          return r.resolve(oo);
                        }
                      } else {
                        return DB.get(resolveobj.type, [id]).then(function(record) {
                          if (!record) {
                            console.log('SuperModel::loadFromIds got back null record from DB for type ' + resolveobj.type + ' and id ' + id);
                            if (--count === 0) {
                              return r.resolve(null);
                            }
                          } else {
                            return resolver.createObjectFrom(record).then(function(obj) {
                              _this.insertObj(resolveobj, obj);
                              if (--count === 0) {
                                return r.resolve(obj);
                              }
                            }, error);
                          }
                        }, error);
                      }
                    }, error);
                  });
                }
              }
            })(robj);
          };
        })(this));
      }
      all(allpromises, error).then((function(_this) {
        return function(results) {
          return alldone.resolve(results);
        };
      })(this), error);
      return alldone;
    };

    SuperModel.prototype.insertObj = function(ro, o) {
      if (ro.array === true) {
        this[ro.name].push(o);
      } else if (ro.hashtable === true) {
        this[ro.name][o.name] = o;
      } else {
        this[ro.name] = o;
      }
      return OMgr.storeObject(o);
    };

    return SuperModel;

  })();

  module.exports = SuperModel;

}).call(this);

//# sourceMappingURL=SuperModel.js.map
