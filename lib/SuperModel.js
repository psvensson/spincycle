// Generated by CoffeeScript 1.8.0
(function() {
  var DB, OMgr, ResolveModule, SuperModel, all, debug, defer, dirname, error, resolver, uuid,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  defer = require('node-promise').defer;

  all = require('node-promise').allOrNone;

  uuid = require('node-uuid');

  OMgr = require('./OStore');

  DB = require('./DB');

  error = require('./Error').error;

  ResolveModule = require('./ResolveModule');

  console.log('supermodel dirname is ' + __dirname);

  console.log(__dirname);

  dirname = __dirname.substring(0, __dirname.indexOf('/node_modules'));

  if (__dirname.indexOf('node_modules') === -1) {
    dirname = '../..';
  }

  console.log('starting module resolving from path ' + dirname);

  resolver = new ResolveModule(dirname);

  debug = process.env["DEBUG"];

  SuperModel = (function() {
    SuperModel.resolver = resolver;

    SuperModel.prototype._getRecord = function() {
      var rv;
      rv = this.getRecord();
      rv._rev = this._rev;
      return rv;
    };

    function SuperModel(record) {
      var M;
      this.record = record;
      this.insertObj = __bind(this.insertObj, this);
      this.loadFromIds = __bind(this.loadFromIds, this);
      this.serialize = __bind(this.serialize, this);
      this._getRecord = __bind(this._getRecord, this);
      M = require('./MessageRouter');
      OMgr.storeObject(this);
      if (this.record._rev) {
        this._rev = this.record._rev;
      }
    }

    SuperModel.prototype.serialize = function() {
      var q, record;
      q = defer();
      if (!this._serializing) {
        this._serializing = true;
        record = this._getRecord();
        if (this._rev) {
          record._rev = this._rev;
        }
        OMgr.storeObject(this);
        DB.set(this.type, record).then((function(_this) {
          return function() {
            _this._serializing = false;
            return q.resolve(_this);
          };
        })(this));
        if (debug) {
          console.log(' * serializing ' + this.type + " id " + this.id);
        }
      } else {
        q.resolve(this);
      }
      return q;
    };

    SuperModel.prototype.loadFromIds = function(resolvearr) {
      var alldone, allpromises, q;
      if (debug) {
        console.log('------------------------------------------------ loadfromIds called');
      }
      if (debug) {
        console.dir(resolvearr);
      }
      alldone = defer();
      allpromises = [];
      if (!resolvearr || resolvearr.length === 0) {
        console.log(' ++++++++++++++++ NO RESOLVEARR ++++++++++++++');
        q = defer();
        allpromises.push(q);
        q.resolve();
      } else {
        resolvearr.forEach((function(_this) {
          return function(robj) {
            return (function(resolveobj) {
              var count, r;
              r = defer();
              allpromises.push(r);
              if (resolveobj.array === true) {
                _this[resolveobj.name] = [];
              }
              if (resolveobj.hashtable === true) {
                _this[resolveobj.name] = {};
              }
              if (!resolveobj.ids) {
                resolveobj.ids = [];
                if (debug) {
                  console.log('============================== null resolveobj.ids for ' + resolveobj.type + ' [' + resolveobj.name + ']');
                }
                return r.resolve(null);
              } else {
                if (typeof resolveobj.ids === 'string') {
                  if (debug) {
                    console.log('upcasting string id to array of ids for ' + resolveobj.name);
                  }
                  resolveobj.ids = [resolveobj.ids];
                }
                if (debug) {
                  console.log(' resolveobjds ' + resolveobj.name + ' (' + (typeof resolveobj.ids) + ') ids length are.. ' + resolveobj.ids.length);
                }
                count = resolveobj.ids.length;
                if (count === 0) {
                  if (debug) {
                    console.log('no ids for ' + resolveobj.name + ' so resolving null');
                  }
                  return r.resolve(null);
                } else {
                  return resolveobj.ids.forEach(function(id) {
                    if (debug) {
                      console.log('trying to get ' + resolveobj.name + ' with id ' + id);
                    }
                    return OMgr.getObject(id, resolveobj.type).then(function(oo) {
                      if (oo) {
                        if (debug) {
                          console.log('found existing instance of ' + resolveobj.name + ' type ' + resolveobj.type + ' in OStore');
                        }
                        _this.insertObj(resolveobj, oo);
                        if (--count === 0) {
                          if (debug) {
                            console.log('resolving ' + resolveobj.name + ' type ' + resolveobj.type + ' immediately');
                          }
                          return r.resolve(oo);
                        }
                      } else {
                        if (debug) {
                          console.log('did not find obj ' + resolveobj.name + ' of type ' + resolveobj.type + ' in OStore. Getting from DB...');
                        }
                        return DB.get(resolveobj.type, [id]).then(function(record) {
                          return resolver.createObjectFrom(record).then(function(obj) {
                            if (debug) {
                              console.log('object ' + resolveobj.name + ' type ' + resolveobj.type + ' created: ' + obj.id);
                            }
                            _this.insertObj(resolveobj, obj);
                            if (--count === 0) {
                              return r.resolve(obj);
                            }
                          });
                        });
                      }
                    });
                  });
                }
              }
            })(robj);
          };
        })(this));
      }
      all(allpromises, error).then(function(results) {
        return alldone.resolve(results);
      }, error);
      return alldone;
    };

    SuperModel.prototype.insertObj = function(ro, o) {
      if (ro.array === true) {
        if (debug) {
          console.log('inserting obj ' + ro.type + ' as array');
        }
        this[ro.name].push(o);
      } else if (ro.hashtable === true) {
        if (debug) {
          console.log('inserting obj ' + ro.type + ' as hashtable');
        }
        this[ro.name][o.name] = o;
      } else {
        if (debug) {
          console.log('inserting obj ' + ro.type + ' as scalar');
        }
        this[ro.name] = o;
      }
      return OMgr.storeObject(o);
    };

    return SuperModel;

  })();

  module.exports = SuperModel;

}).call(this);

//# sourceMappingURL=SuperModel.js.map
