// Generated by CoffeeScript 1.8.0
(function() {
  var DB, OMgr, ResolveModule, SuperModel, all, defer, dirname, error, modulecache, resolver, uuid,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  defer = require('node-promise').defer;

  all = require('node-promise').allOrNone;

  uuid = require('node-uuid');

  OMgr = require('./OStore');

  DB = require('./DB');

  error = require('./Error').error;

  ResolveModule = require('./ResolveModule');

  console.log('supermodel dirname is ' + __dirname);

  console.log(__dirname);

  dirname = __dirname.substring(0, __dirname.indexOf('/node_modules'));

  if (__dirname.indexOf('node_modules') === -1) {
    dirname = '../..';
  }

  console.log('starting module resolving from path ' + dirname);

  resolver = new ResolveModule(dirname);

  modulecache = [];

  SuperModel = (function() {
    function SuperModel() {
      this.insertObj = __bind(this.insertObj, this);
      this.createObjectFrom = __bind(this.createObjectFrom, this);
      this.loadFromIds = __bind(this.loadFromIds, this);
      this.serialize = __bind(this.serialize, this);
    }

    SuperModel.prototype.serialize = function() {
      var q, record;
      q = defer();
      if (!this._serializing) {
        this._serializing = true;
        record = this.getRecord();
        OMgr.storeObject(this);
        DB.set(this.type, record).then((function(_this) {
          return function() {
            _this._serializing = false;
            return q.resolve(_this);
          };
        })(this));
      } else {
        q.resolve(this);
      }
      return q;
    };

    SuperModel.prototype.loadFromIds = function(resolvearr) {
      var alldone, allpromises, q;
      alldone = defer();
      allpromises = [];
      if (!resolvearr || resolvearr.length === 0) {
        console.log(' ++++++++++++++++ NO RESOLVEARR ++++++++++++++');
        q = defer();
        allpromises.push(q);
        q.resolve();
      } else {
        resolvearr.forEach((function(_this) {
          return function(robj) {
            return (function(resolveobj) {
              var count, r;
              r = defer();
              allpromises.push(r);
              if (resolveobj.array === true) {
                _this[resolveobj.name] = [];
              }
              if (resolveobj.hashtable === true) {
                _this[resolveobj.name] = {};
              }
              if (!resolveobj.ids) {
                resolveobj.ids = [];
                return r.resolve(null);
              } else {
                if (typeof resolveobj.ids === 'string') {
                  resolveobj.ids = [resolveobj.ids];
                }
                count = resolveobj.ids.length;
                return resolveobj.ids.forEach(function(id) {
                  return OMgr.getObject(id, resolveobj.type).then(function(oo) {
                    if (oo) {
                      _this.insertObj(resolveobj, oo);
                      if (--count === 0) {
                        return r.resolve(oo);
                      }
                    } else {
                      return DB.get(resolveobj.type, [id]).then(function(record) {
                        return _this.createObjectFrom(record).then(function(obj) {
                          _this.insertObj(resolveobj, obj);
                          if (--count === 0) {
                            return r.resolve(obj);
                          }
                        });
                      });
                    }
                  });
                });
              }
            })(robj);
          };
        })(this));
      }
      all(allpromises, error).then(function(results) {
        return alldone.resolve(results);
      }, error);
      return alldone;
    };

    SuperModel.prototype.createObjectFrom = function(record) {
      var q;
      q = defer();
      if (!record || !record[0]) {
        console.log('createObjectFrom got null record...');
        q.resolve(null);
      } else {
        resolver.resolve(record[0].type, function(filename) {
          var module, o;
          module = modulecache[record[0].type] || require(filename.replace('.js', ''));
          modulecache[record[0].type] = module;
          o = Object.create(module.prototype);
          o.constructor(record[0]);
          return q.resolve(o);
        });
      }
      return q;
    };

    SuperModel.prototype.insertObj = function(ro, o) {
      if (ro.array === true) {
        return this[ro.name].push(o);
      } else if (ro.hashtable === true) {
        return this[ro.name][o.name] = o;
      } else {
        return this[ro.name] = o;
      }
    };

    return SuperModel;

  })();

  module.exports = SuperModel;

}).call(this);

//# sourceMappingURL=SuperModel.js.map
