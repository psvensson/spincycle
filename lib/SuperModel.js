// Generated by CoffeeScript 1.8.0
(function() {
  var DB, OMgr, ResolveModule, SuperModel, all, defer, error, resolver, uuid,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  defer = require('node-promise').defer;

  all = require('node-promise').allOrNone;

  uuid = require('node-uuid');

  OMgr = require('./OStore');

  DB = require('./DB');

  error = require('./Error').error;

  ResolveModule = require('./ResolveModule');

  resolver = new ResolveModule('../');

  SuperModel = (function() {
    function SuperModel() {
      this.insertObj = __bind(this.insertObj, this);
      this.createObjectFrom = __bind(this.createObjectFrom, this);
      this.loadFromIds = __bind(this.loadFromIds, this);
      this.serialize = __bind(this.serialize, this);
    }

    SuperModel.prototype.serialize = function() {
      var record;
      record = this.getRecord();
      OMgr.storeRecord(this);
      DB.set(this.type, record);
      return console.log(' * serializing ' + this.type + " id " + this.id);
    };

    SuperModel.prototype.loadFromIds = function(resolvearr) {
      var alldone, allpromises, q;
      alldone = defer();
      allpromises = [];
      if (!resolvearr) {
        q = defer();
        allpromises.push(q);
        q.resolve();
      } else {
        resolvearr.forEach((function(_this) {
          return function(resolveobj) {
            return function() {
              var r;
              r = defer();
              allpromises.push(rd);
              if (!resolveobj.ids) {
                _this[resolveobj.name] = [];
                resolveobj.ids = [];
                console.log('============================== 1');
                return r.resolve({});
              } else {
                if (typeof resolveobj.ids === 'string') {
                  resolveobj.ids = [resolveobj.ids];
                }
                if (resolveobj.ids.length > 1) {
                  _this[resolveobj.name] = [];
                }
                console.log(' resolveobjds (' + (typeof resolveobj.ids) + ') is are.. ' + resolveobj.ids);
                console.dir(resolveobj.ids);
                return resolveobj.ids.forEach(function(id) {
                  return DB.get(resolveobj.type, [id]).then(function(record) {
                    return _this.createObjectFrom(record).then(function(obj) {
                      console.log('object created: ' + obj.id);
                      _this.insertObj(resolveobj, obj);
                      console.log('============================== 2');
                      return r.resolve(obj);
                    });
                  });
                });
              }
            };
          };
        })(this));
      }
      all(allpromises, error).then(function(results) {
        console.log('allpromises resolved');
        return alldone.resolve(results);
      }, error);
      return alldone;
    };

    SuperModel.prototype.createObjectFrom = function(record) {
      var q;
      q = defer();
      resolver.resolve(record[0].type, function(filename) {
        var module, o;
        module = require(filename.replace('.js', ''));
        o = Object.create(module.prototype);
        o.constructor(record[0]);
        return q.resolve(o);
      });
      return q;
    };

    SuperModel.prototype.insertObj = function(ro, o) {
      if (ro.ids.length > 1) {
        return this[ro.name].push(o);
      } else {
        return this[ro.name] = o;
      }
    };

    return SuperModel;

  })();

  module.exports = SuperModel;

}).call(this);

//# sourceMappingURL=SuperModel.js.map
