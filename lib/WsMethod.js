// Generated by CoffeeScript 1.8.0
(function() {
  var ClientEndpoints, IO, WsMethod, uuid;

  IO = require("socket.io");

  uuid = require('node-uuid');

  ClientEndpoints = require('./ClientEndpoints');

  WsMethod = (function() {
    WsMethod.wsroutes = [];

    function WsMethod(messageRouter, server) {
      var io;
      this.messageRouter = messageRouter;
      io = IO(server);
      io.set('origins', '*:*');
      io.on("connection", function(socket) {
        var adr, ip, port;
        ip = socket.handshake.address;
        port = socket.request.connection.remotePort;
        adr = ip + ':' + port;
        console.log('new ws connection from ' + adr);
        ClientEndpoints.registerEndpoint(adr, function(msg) {
          return socket.emit('message', msg);
        });
        socket.on("message", function(datastring) {
          var data, fn;
          console.log('got new message "' + datastring + '" [' + (typeof datastring) + ']');
          if (typeof datastring === "string") {
            data = JSON.parse(datastring);
          } else {
            data = datastring;
          }
          data.client = ip + ':' + port;
          data.messageId = data.messageId || uuid.v4();
          data.replyFunc = function(replydata) {
            replydata.messageId = data.messageId;
            if (debug) {
              console.log('replyFunc replying with');
            }
            if (debug) {
              console.dir(replydata);
            }
            return socket.emit('message', replydata);
          };
          fn = WsMethod.wsroutes[data.target];
          if (fn) {
            return fn(data);
          } else {
            return console.log('*********** Could not find registered target for ' + data.target);
          }
        });
        return socket.on("disconnect", function() {
          adr = ip + ':' + port;
          console.log('client at ' + adr + ' disconnected');
          return ClientEndpoints.removeEndpoint(adr);
        });
      });
      this.messageRouter.addMethod('ws', this);
    }

    WsMethod.prototype.registrationFunc = function(targetName, targetFunc) {
      return WsMethod.wsroutes[targetName] = targetFunc;
    };

    return WsMethod;

  })();

  module.exports = WsMethod;

}).call(this);

//# sourceMappingURL=WsMethod.js.map
