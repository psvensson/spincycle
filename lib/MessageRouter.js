// Generated by CoffeeScript 1.8.0
(function() {
  var ClientEndpoints, DB, EventManager, HttpMethod, MessageRouter, OStore, ObjectManager, RedisMethod, ResolveModule, SuperModel, WsMethod, error,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  ObjectManager = require('./ObjectManager');

  error = require('./Error').error;

  HttpMethod = require('./HttpMethod');

  WsMethod = require('./WsMethod');

  RedisMethod = require('./RedisMethod');

  DB = require('./DB');

  EventManager = require('./EventManager');

  SuperModel = require('./SuperModel');

  ClientEndpoints = require('./ClientEndpoints');

  OStore = require('./OStore');

  ResolveModule = require('./ResolveModule');

  MessageRouter = (function() {
    var debug;

    MessageRouter.HttpMethod = HttpMethod;

    MessageRouter.WsMethod = WsMethod;

    MessageRouter.RedisMethod = RedisMethod;

    MessageRouter.DB = DB;

    MessageRouter.EventManager = EventManager;

    MessageRouter.SuperModel = SuperModel;

    MessageRouter.ObjectManager = ObjectManager;

    MessageRouter.ClientEndpoints = ClientEndpoints;

    MessageRouter.OStore = OStore;

    MessageRouter.ResolveModule = ResolveModule;

    debug = process.env["DEBUG"];

    function MessageRouter(authMgr, dburl) {
      var pjson;
      this.authMgr = authMgr;
      this.routeMessage = __bind(this.routeMessage, this);
      this.removeTarget = __bind(this.removeTarget, this);
      this.addTarget = __bind(this.addTarget, this);
      this.addMethod = __bind(this.addMethod, this);
      this.expose = __bind(this.expose, this);
      this.setup = __bind(this.setup, this);
      MessageRouter.DB.dburl = dburl;
      pjson = require('../package.json');
      console.log('SpinCycle messageRouter constructor. Version - ' + pjson.version);
      this.authMgr.messagerouter = this;
      this.resolver = new ResolveModule();
      this.targets = [];
      this.debugtargets = [];
      this.args = [];
      this.methods = [];
      this.objectManager = new ObjectManager(this);
      this.objectManager.setup();
      if (this.authMgr.setup) {
        this.authMgr.setup(this);
      }
      this.setup();
    }

    MessageRouter.prototype.setup = function() {
      return this.addTarget('listcommands', '<noargs>', (function(_this) {
        return function(msg) {
          var name, rv, target, _ref;
          console.log('listCommands called');
          rv = {
            listcommands: '<noarg>'
          };
          _ref = _this.targets;
          for (name in _ref) {
            target = _ref[name];
            console.log('adding target ' + name);
            rv[name] = _this.args[name];
          }
          return msg.replyFunc({
            status: EventManager.general.SUCCESS,
            info: 'list of available targets',
            payload: rv
          });
        };
      })(this));
    };

    MessageRouter.prototype.expose = function(type) {
      var method, name, _ref, _results;
      _ref = this.methods;
      _results = [];
      for (name in _ref) {
        method = _ref[name];
        _results.push(method.expose(type));
      }
      return _results;
    };

    MessageRouter.prototype.addMethod = function(methodName, method) {
      var targetName, _results;
      console.log('addMethod called for "' + methodName + '"');
      this.methods[methodName] = method;
      _results = [];
      for (targetName in this.targets) {
        if (debug) {
          _results.push(console.log('registering target ' + targetName + ' on method ' + methodName + method.registrationFunc(targetName, this.routeMessage)));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    MessageRouter.prototype.addTarget = function(targetName, args, targetFunc) {
      var method, name, _ref, _results;
      if (debug) {
        console.log('adding route target for "' + targetName + '" args = ' + args + ' targetFunc is ' + targetFunc);
      }
      this.targets[targetName] = targetFunc;
      this.args[targetName] = args;
      _ref = this.methods;
      _results = [];
      for (name in _ref) {
        method = _ref[name];
        if (debug) {
          console.log('registering target ' + targetName + ' on method ' + name + ' -> ' + method);
        }
        if (method.registrationFunc) {
          _results.push(method.registrationFunc(targetName, this.routeMessage));
        } else {
          console.log('Spincycle did NOT find target for ' + targetName);
          console.log('----------------methods-------------------');
          _results.push(console.dir(this.methods));
        }
      }
      return _results;
    };

    MessageRouter.prototype.removeTarget = function(targetName) {
      return this.targets[targetName] = null;
    };

    MessageRouter.prototype.routeMessage = function(message) {
      var fn;
      fn = this.targets[message.target];
      if (debug) {
        console.log('routeMessage called for "' + message.target + '"');
      }
      if (debug) {
        console.dir(this.targets);
      }
      if (fn) {
        return this.authMgr.decorateMessageWithUser(message).then(function(m) {
          if (!m.user) {
            console.log('** SpinCycle did not get message decorated with user property from AuthenticationManager **');
            exit(-1);
          }
          return fn(m);
        });
      } else {
        return console.log('--- could not find registered target for message! ---');
      }
    };

    return MessageRouter;

  })();

  module.exports = MessageRouter;

}).call(this);

//# sourceMappingURL=MessageRouter.js.map
