// Generated by CoffeeScript 1.9.3
(function() {
  var RethinkPersistence, debug, defer, r,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  r = require('rethinkdb');

  defer = require('node-promise').defer;

  debug = process.env["DEBUG"];

  RethinkPersistence = (function() {
    var madr, mport;

    if (process.env['RETHINKDB_HOST']) {
      madr = process.env['RETHINKDB_HOST'];
    } else {
      madr = '127.0.0.1';
    }

    mport = process.env['RETHINKDB_PORT_28015_TCP_PORT'] || '28015';

    function RethinkPersistence(dburl, DB) {
      this.dburl = dburl;
      this.DB = DB;
      this.remove = bind(this.remove, this);
      this.set = bind(this.set, this);
      this.search = bind(this.search, this);
      this.findQuery = bind(this.findQuery, this);
      this.findMany = bind(this.findMany, this);
      this.find = bind(this.find, this);
      this.get = bind(this.get, this);
      this.count = bind(this.count, this);
      this.all = bind(this.all, this);
      this.extend = bind(this.extend, this);
      this.getDbFor = bind(this.getDbFor, this);
      this._dogetDBFor = bind(this._dogetDBFor, this);
      this.listenForChanges = bind(this.listenForChanges, this);
      this.getConnection = bind(this.getConnection, this);
      this.connect = bind(this.connect, this);
      this.connection = void 0;
      this.dbs = [];
    }

    RethinkPersistence.prototype.connect = function() {
      var ccc, q;
      console.log('connect called...  dburl = ' + this.dburl);
      console.dir(this.dburl);
      q = defer();
      ccc = this.dburl || {
        host: madr,
        port: mport
      };
      r.connect(ccc, (function(_this) {
        return function(err, conn) {
          if (err) {
            throw err;
          }
          _this.connection = conn;
          return q.resolve(_this);
        };
      })(this));
      return q;
    };

    RethinkPersistence.prototype.getConnection = function() {};

    RethinkPersistence.prototype.listenForChanges = function(table) {
      return table.changes().run(this.connection).then((function(_this) {
        return function(cursor) {
          if (cursor) {
            return cursor.each(function(el) {
              if (debug) {
                console.log('Rethink changes update --- --- ---');
              }
              if (debug) {
                console.dir(el);
              }
              if (_this.DB) {
                if (el) {
                  return _this.DB.onUpdated(el);
                }
              } else {
                return console.log('@DB not defined in rethinkPersistence!!');
              }
            });
          }
        };
      })(this));
    };

    RethinkPersistence.prototype._dogetDBFor = function(_type) {
      var q, type;
      q = defer();
      type = _type.toLowerCase();
      r.dbList().contains('spincycle')["do"](function(databaseExists) {
        return r.branch(databaseExists, {
          created: 0
        }, r.dbCreate('spincycle'));
      }).run(this.connection, (function(_this) {
        return function(err, res) {
          if (err) {
            console.log('Rethink getDbFor err = ' + err);
            console.dir(err);
          }
          if (_this.dbs[type]) {
            return q.resolve(_this.dbs[type]);
          } else {
            return r.db('spincycle').tableList().run(_this.connection, function(te, _tlist) {
              var exists, table, tlist;
              tlist = _tlist || [];
              exists = (tlist.filter(function(el) {
                return el === type;
              }))[0];
              if (exists === type) {
                table = _this.dbs[type];
                if (!table) {
                  table = r.db('spincycle').table(type);
                  _this.dbs[type] = table;
                  _this.listenForChanges(table);
                }
                return q.resolve(table);
              } else {
                console.log('exist != ' + type);
                return r.db('spincycle').tableCreate(type).run(_this.connection, function(err2, res2) {
                  if (err2) {
                    console.log('tableList err = ' + err2);
                    console.dir(err2);
                  }
                  table = r.db('spincycle').table(type);
                  console.log('creating new table ' + type);
                  _this.dbs[type] = table;
                  _this.listenForChanges(table);
                  return q.resolve(table);
                });
              }
            });
          }
        };
      })(this));
      return q;
    };

    RethinkPersistence.prototype.getDbFor = function(_type) {
      var q;
      q = defer();
      if (!this.connection) {
        this.connect().then((function(_this) {
          return function() {
            return _this._dogetDBFor(_type).then(function(db) {
              return q.resolve(db);
            });
          };
        })(this));
      } else {
        this._dogetDBFor(_type).then((function(_this) {
          return function(db) {
            return q.resolve(db);
          };
        })(this));
      }
      return q;
    };

    RethinkPersistence.prototype.extend = function(_type, id, field, def) {
      var q;
      q = defer();
      this.get(_type, id, (function(_this) {
        return function(o) {
          if (o && !o[field]) {
            o[field] = def;
            return _this.set(_type, o, function(setdone) {
              return q.resolve(o);
            });
          }
        };
      })(this));
      return q;
    };

    RethinkPersistence.prototype.all = function(_type, query, cb) {
      var type;
      type = _type.toLowerCase();
      if (debug) {
        console.log('Rethink.all called for ' + type);
      }
      return this.getDbFor(type).then((function(_this) {
        return function(db) {
          var rr;
          if (debug) {
            console.log('all got query');
          }
          if (debug) {
            console.dir(query);
          }
          rr = db;
          if (query != null ? query.limit : void 0) {
            if (debug) {
              console.log('skipping ' + query.skip + ' limiting ' + query.limit);
            }
            rr = rr.skip(parseInt(query.skip)).limit(parseInt(query.limit));
          }
          if (query != null ? query.sort : void 0) {
            rr = db.orderBy((query != null ? query.sort : void 0) || 'name');
          }
          return rr.run(_this.connection, function(err, cursor) {
            if (err) {
              console.log('all err: ' + err);
              console.dir(err);
              throw err;
            }
            return cursor.toArray((function(_this) {
              return function(ce, result) {
                return cb(result);
              };
            })(this));
          });
        };
      })(this));
    };

    RethinkPersistence.prototype.count = function(_type) {
      var q, type;
      if (debug) {
        console.log('Rethink.count called');
      }
      type = _type.toLowerCase();
      q = defer();
      this.getDbFor(type).then((function(_this) {
        return function(db) {
          return db.count().run(_this.connection, function(err, result) {
            if (err) {
              console.log('count err: ' + err);
              console.dir(err);
              throw err;
            }
            console.log(result);
            return q.resolve(result);
          });
        };
      })(this));
      return q;
    };

    RethinkPersistence.prototype.get = function(_type, id, cb) {
      var type;
      type = _type.toLowerCase();
      return this.getDbFor(type).then((function(_this) {
        return function(db) {
          return db.get(id).run(_this.connection, function(err, result) {
            if (err) {
              console.log('get err: ' + err);
              console.dir(err);
              throw err;
            }
            return cb(result);
          });
        };
      })(this));
    };

    RethinkPersistence.prototype.find = function(_type, property, _value) {
      return this.findMany(_type, property, _value);
    };

    RethinkPersistence.prototype.findMany = function(_type, _property, _value) {
      var property, q, type, value;
      if (debug) {
        console.log('Rethink.findMany called');
      }
      property = _property || "";
      value = _value || "";
      if (value) {
        value = value.toString();
        value = value.replace(/[^\w\s@.-]/gi, '');
      }
      q = defer();
      type = _type.toLowerCase();
      this.getDbFor(type).then((function(_this) {
        return function(db) {
          return db.filter(function(element) {
            return element(property).match(value);
          }).run(_this.connection, function(err, cursor) {
            if (err) {
              console.log('findMany err: ' + err);
              console.dir(err);
              throw err;
            }
            return cursor.toArray((function(_this) {
              return function(ce, result) {
                return q.resolve(result);
              };
            })(this));
          });
        };
      })(this));
      return q;
    };

    RethinkPersistence.prototype.findQuery = function(_type, query) {
      var q, type;
      console.log('Rethink findQuery called for type ' + _type);
      console.dir(query);
      if (!query.property) {
        query.property = 'name';
      }
      q = defer();
      type = _type.toLowerCase();
      this.getDbFor(type).then((function(_this) {
        return function(db) {
          var rr, rv, value;
          rr = db.orderBy(query.sort || 'name');
          rv = query.value === 'undefined' || query.value.indexOf('[') > -1 || query.value === 'null' || query.value.indexOf('bject') > -1;
          console.log('rv = ' + rv);
          console.log('not rv and query.property ---> ' + (!rv && query.property !== void 0 && query.property !== null));
          if (!rv && query.property !== void 0 && query.property !== null) {
            value = query.value.toString();
            value = value.replace(/[`~!@#$%^&*()_|+\=?;:'",.<>\{\}\[\]\\\/]/gi, '');
            if (debug) {
              console.log('final search value is ' + value);
            }
            if (query.wildcard) {
              value = '^' + value + '$';
            }
            rr = rr.filter(function(element) {
              return element(query.property).match(value);
            });
            if (query.limit) {
              rr = rr.skip(query.skip).limit(query.limit);
            }
            if (debug) {
              console.log('Rethink findQuery running query...');
            }
            return rr.run(_this.connection, function(err, cursor) {
              if (err) {
                console.log('findQuery error: ' + err);
                console.dir(err);
              }
              return cursor.toArray((function(_this) {
                return function(ce, result) {
                  console.log('findQuery result is ');
                  console.log(result);
                  return q.resolve(result);
                };
              })(this));
            });
          } else {
            return q.resolve([]);
          }
        };
      })(this));
      return q;
    };

    RethinkPersistence.prototype.search = function(_type, property, _value) {
      var q, value;
      if (debug) {
        console.log('Rethink.search called');
      }
      value = _value || "";
      if (value) {
        value = value.toString();
        value = value.replace(/[^\w\s@.]/gi, '');
      }
      console.log('Rethink search called for type ' + _type + ' property ' + property + ' and value ' + value);
      q = defer();
      this.getDbFor(type).then((function(_this) {
        return function(db) {
          return db.filter(function(element) {
            return element(property).match("^" + value);
          }).run(_this.connection, function(err, cursor) {
            if (err) {
              console.log('search err: ' + err);
              console.dir(err);
              throw err;
            }
            return cursor.toArray((function(_this) {
              return function(ce, result) {
                console.log('search result is ' + result);
                console.log(result);
                return q.resolve(result);
              };
            })(this));
          });
        };
      })(this));
      return q;
    };

    RethinkPersistence.prototype.set = function(_type, obj, cb) {
      var type;
      type = _type.toLowerCase();
      return this.getDbFor(type).then((function(_this) {
        return function(db) {
          var ex;
          try {
            return db.insert(obj, {
              conflict: "update",
              return_changes: true
            }).run(_this.connection, function(err, result) {
              if (err) {
                console.log('set err: ' + err);
                console.dir(err);
                throw err;
                return cb();
              } else {
                return cb(result);
              }
            });
          } catch (_error) {
            ex = _error;
            console.log('caught exception!');
            console.dir(ex);
            console.dir(obj);
            return cb();
          }
        };
      })(this));
    };

    RethinkPersistence.prototype.remove = function(_type, obj, cb) {
      var id, type;
      if (debug) {
        console.log('Rethink.remove called');
      }
      type = _type.toLowerCase();
      id = obj.id;
      return this.getDbFor(type).then((function(_this) {
        return function(db) {
          return db.get(id)["delete"]().run(_this.connection, function(err, result) {
            if (err) {
              console.log('remove err: ' + err);
              console.dir(err);
              throw err;
            }
            console.log('remove result = ' + result);
            return cb(result);
          });
        };
      })(this));
    };

    return RethinkPersistence;

  })();

  module.exports = RethinkPersistence;

}).call(this);

//# sourceMappingURL=RethinkPersistence.js.map
