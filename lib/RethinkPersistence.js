// Generated by CoffeeScript 1.8.0
(function() {
  var RethinkPersistence, debug, defer, r,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  r = require('rethinkdb');

  defer = require('node-promise').defer;

  debug = process.env["DEBUG"];

  RethinkPersistence = (function() {
    function RethinkPersistence(dburl, DB) {
      this.dburl = dburl;
      this.DB = DB;
      this.remove = __bind(this.remove, this);
      this.set = __bind(this.set, this);
      this.search = __bind(this.search, this);
      this.findQuery = __bind(this.findQuery, this);
      this.findMany = __bind(this.findMany, this);
      this.find = __bind(this.find, this);
      this.get = __bind(this.get, this);
      this.count = __bind(this.count, this);
      this.all = __bind(this.all, this);
      this.getDbFor = __bind(this.getDbFor, this);
      this._dogetDBFor = __bind(this._dogetDBFor, this);
      this.getConnection = __bind(this.getConnection, this);
      this.connect = __bind(this.connect, this);
      this.connection = void 0;
      this.dbs = [];
    }

    RethinkPersistence.prototype.connect = function() {
      var q;
      console.log('connect called...');
      q = defer();
      r.connect({
        host: 'localhost',
        port: 28015
      }, (function(_this) {
        return function(err, conn) {
          if (err) {
            throw err;
          }
          _this.connection = conn;
          return q.resolve(_this);
        };
      })(this));
      return q;
    };

    RethinkPersistence.prototype.getConnection = function() {};

    RethinkPersistence.prototype._dogetDBFor = function(_type) {
      var q, type;
      q = defer();
      type = _type.toLowerCase();
      r.dbList().contains('spincycle')["do"](function(databaseExists) {
        return r.branch(databaseExists, {
          created: 0
        }, r.dbCreate('spincycle'));
      }).run(this.connection, (function(_this) {
        return function(err, res) {
          if (err) {
            console.log('Rethink getDbFor err = ' + err);
            console.dir(err);
          }
          if (_this.dbs[type]) {
            return q.resolve(_this.dbs[type]);
          } else {
            return r.db('spincycle').tableList().run(_this.connection, function(te, _tlist) {
              var exists, table, tlist;
              tlist = _tlist || [];
              exists = (tlist.filter(function(el) {
                return el === type;
              }))[0];
              if (exists === type) {
                table = _this.dbs[type];
                if (!table) {
                  table = r.db('spincycle').table(type);
                  _this.dbs[type] = table;
                }
                return q.resolve(table);
              } else {
                console.log('exist != ' + type);
                return r.db('spincycle').tableCreate(type).run(_this.connection, function(err2, res2) {
                  if (err2) {
                    console.log('tableList err = ' + err2);
                    console.dir(err2);
                  }
                  table = r.db('spincycle').table(type);
                  console.lo('creating new table ' + type);
                  _this.dbs[type] = table;
                  return q.resolve(table);
                });
              }
            });
          }
        };
      })(this));
      return q;
    };

    RethinkPersistence.prototype.getDbFor = function(_type) {
      var q;
      q = defer();
      if (!this.connection) {
        this.connect().then((function(_this) {
          return function() {
            return _this._dogetDBFor(_type).then(function(db) {
              return q.resolve(db);
            });
          };
        })(this));
      } else {
        this._dogetDBFor(_type).then((function(_this) {
          return function(db) {
            return q.resolve(db);
          };
        })(this));
      }
      return q;
    };

    RethinkPersistence.prototype.all = function(_type, cb) {
      var type;
      type = _type.toLowerCase();
      return this.getDbFor(type).then((function(_this) {
        return function(db) {
          return db.run(_this.connection, function(err, cursor) {
            if (err) {
              console.log('all err: ' + err);
              console.dir(err);
              throw err;
            }
            return cursor.toArray((function(_this) {
              return function(ce, result) {
                return cb(result);
              };
            })(this));
          });
        };
      })(this));
    };

    RethinkPersistence.prototype.count = function(_type) {
      var q, type;
      console.log('count called');
      type = _type.toLowerCase();
      q = defer();
      this.getDbFor(type).then((function(_this) {
        return function(db) {
          return db.count().run(_this.connection, function(err, result) {
            if (err) {
              console.log('count err: ' + err);
              console.dir(err);
              throw err;
            }
            console.log(result);
            return q.resolve(result);
          });
        };
      })(this));
      return q;
    };

    RethinkPersistence.prototype.get = function(_type, id, cb) {
      var type;
      type = _type.toLowerCase();
      return this.getDbFor(type).then((function(_this) {
        return function(db) {
          return db.get(id).run(_this.connection, function(err, result) {
            if (err) {
              console.log('get err: ' + err);
              console.dir(err);
              throw err;
            }
            console.log('get result was');
            console.log(result);
            return cb(result);
          });
        };
      })(this));
    };

    RethinkPersistence.prototype.find = function(_type, property, _value) {
      return this.findMany(_type, property, _value);
    };

    RethinkPersistence.prototype.findMany = function(_type, property, _value) {
      var q, type, value;
      console.log('findMany called');
      value = _value || "";
      if (value) {
        value = value.toString();
        value = value.replace(/[^\w\s@.-]/gi, '');
      }
      console.log('Rethink findmany called for type ' + _type + ' property ' + property + ' and value ' + value);
      q = defer();
      type = _type.toLowerCase();
      this.getDbFor(type).then((function(_this) {
        return function(db) {
          return db.filter(function(element) {
            return element(property).match(value);
          }).run(_this.connection, function(err, cursor) {
            if (err) {
              console.log('findMany err: ' + err);
              console.dir(err);
              throw err;
            }
            return cursor.toArray((function(_this) {
              return function(ce, result) {
                return q.resolve(result);
              };
            })(this));
          });
        };
      })(this));
      return q;
    };

    RethinkPersistence.prototype.findQuery = function(_type, query) {
      var q, type;
      q = defer();
      type = _type.toLowerCase();
      this.getDbFor(type).then((function(_this) {
        return function(db) {
          var rr, value;
          rr = db.orderBy(query.sort || 'name');
          if (query.property) {
            value = query.value.toString();
            value = value.replace(/[^\w\s@.]/gi, '');
            if (query.wildcard) {
              value = '^' + value;
            } else {
              value = '^' + value + '$';
            }
            rr = rr.filter(function(element) {
              var rv;
              rv = query.value === 'undefined' || query.value.indexOf('[') > -1 || query.value === 'null' || query.value.indexOf('bject') > -1;
              return !rv && element(query.property).match(value);
            });
          }
          if (query.limit) {
            rr = rr.slice(query.skip, query.limit);
          }
          return rr.run(_this.connection, function(err, cursor) {
            if (err) {
              console.log('findQuery error: ' + err);
              console.dir(err);
            }
            return cursor.toArray((function(_this) {
              return function(ce, result) {
                return q.resolve(result);
              };
            })(this));
          });
        };
      })(this));
      return q;
    };

    RethinkPersistence.prototype.search = function(_type, property, _value) {
      var q, value;
      console.log('search called');
      value = _value || "";
      if (value) {
        value = value.toString();
        value = value.replace(/[^\w\s@.]/gi, '');
      }
      console.log('Rethink search called for type ' + _type + ' property ' + property + ' and value ' + value);
      q = defer();
      this.getDbFor(type).then((function(_this) {
        return function(db) {
          return db.filter(function(element) {
            return element(property).match("^" + value);
          }).run(_this.connection, function(err, cursor) {
            if (err) {
              console.log('search err: ' + err);
              console.dir(err);
              throw err;
            }
            return cursor.toArray((function(_this) {
              return function(ce, result) {
                console.log('search result is ' + result);
                console.log(result);
                return q.resolve(result);
              };
            })(this));
          });
        };
      })(this));
      return q;
    };

    RethinkPersistence.prototype.set = function(_type, obj, cb) {
      var type;
      type = _type.toLowerCase();
      return this.getDbFor(type).then((function(_this) {
        return function(db) {
          return db.insert(obj, {
            conflict: "update",
            return_changes: true
          }).run(_this.connection, function(err, result) {
            if (err) {
              console.log('set err: ' + err);
              console.dir(err);
              throw err;
              cb();
            }
            return cb(result);
          });
        };
      })(this));
    };

    RethinkPersistence.prototype.remove = function(_type, obj, cb) {
      var id, type;
      console.log('remove called');
      type = _type.toLowerCase();
      id = obj.id;
      return this.getDbFor(type).then((function(_this) {
        return function(db) {
          return db.get(id)["delete"]().run(_this.connection, function(err, result) {
            if (err) {
              console.log('remove err: ' + err);
              console.dir(err);
              throw err;
            }
            console.log('remove result = ' + result);
            return cb(result);
          });
        };
      })(this));
    };

    return RethinkPersistence;

  })();

  module.exports = RethinkPersistence;

}).call(this);

//# sourceMappingURL=RethinkPersistence.js.map
