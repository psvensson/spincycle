// Generated by CoffeeScript 1.10.0
(function() {
  var ResolveModule, debug, defer, dirname,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  defer = require('node-promise').defer;

  debug = process.env["DEBUG"];

  console.log('resolvemodule dirname is ' + __dirname);

  console.log(__dirname);

  dirname = __dirname.substring(0, __dirname.indexOf('/node_modules'));

  if (__dirname.indexOf('node_modules') === -1) {
    dirname = '..';
  }

  console.log('starting module resolving from path ' + dirname);

  ResolveModule = (function() {
    ResolveModule.modulecache = [];

    ResolveModule.modulepathcache = [];

    function ResolveModule() {
      this.createObjectFrom = bind(this.createObjectFrom, this);
      this.resolve = bind(this.resolve, this);
      console.log("+++ new ResolveModule created ++");
      process.on('resolvemodule', (function(_this) {
        return function(name, cb) {
          return _this.resolve(name, cb);
        };
      })(this));
    }

    ResolveModule.prototype.resolve = function(name, cb) {
      var finder, rv;
      rv = ResolveModule.modulepathcache[name];
      if (rv) {
        return cb(rv);
      } else {
        finder = require('findit')(dirname);
        finder.on('file', function(origfile) {
          var coffeecheck, file;
          file = "" + origfile;
          if (file.indexOf('node_modules') === -1 && file.indexOf('bower_components') === -1) {
            if (file.indexOf('/') > -1) {
              file = file.substring(file.lastIndexOf('/') + 1, file.length);
            }
            if (file.indexOf('.') > -1) {
              file = file.substring(0, file.indexOf('.'));
            }
            if (process.env['CHECK_COFFEE']) {
              coffeecheck = origfile.indexOf('.coffee') > -1;
            } else {
              coffeecheck = origfile.indexOf('.coffee') === -1;
            }
            if (file === name && (origfile.indexOf('.js') > -1 || coffeecheck) && origfile.indexOf('.map') === -1 && origfile.indexOf('.dump') === -1) {
              rv = origfile;
              ResolveModule.modulepathcache[name] = rv;
              finder.stop();
              return cb(rv);
            } else {

            }
          }
        });
        return finder.on('end', function() {});
      }
    };

    ResolveModule.prototype.createObjectFrom = function(record) {
      var module, o, q;
      q = defer();
      if (!record || (record[0] && (record[0] === null) || record[0] === 'null')) {
        if (debug) {
          console.log('ResolveModule.createObjectFrom ++++++++++++++!!!!!!!!!!!!!!!!!!! NULL RECORD!!');
        }
        q.resolve(null);
      } else {
        if (!record[0]) {
          record = [record];
        }
        module = ResolveModule.modulecache[record[0].type];
        if (module) {
          o = Object.create(module.prototype);
          o._rev = record._rev;
          o.constructor(record[0]);
          q.resolve(o);
        } else {
          this.resolve(record[0].type, function(filename) {
            if (debug) {
              console.log('ResolveModule resolved module ' + record[0].type + " as " + filename);
            }
            module = ResolveModule.modulecache[record[0].type] || require(filename.replace('.js', ''));
            ResolveModule.modulecache[record[0].type] = module;
            o = Object.create(module.prototype);
            o._rev = record._rev;
            o.constructor(record[0]);
            return q.resolve(o);
          });
        }
      }
      return q;
    };

    return ResolveModule;

  })();

  module.exports = ResolveModule;

}).call(this);

//# sourceMappingURL=ResolveModule.js.map
