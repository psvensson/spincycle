// Generated by CoffeeScript 1.9.1
(function() {
  var ClientEndpoints, RedisMethod, debug, redis, uuid,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  uuid = require('node-uuid');

  redis = require('redis');

  ClientEndpoints = require('./ClientEndpoints');

  debug = process.env["DEBUG"];

  RedisMethod = (function() {
    function RedisMethod(messageRouter, app, basePath) {
      this.registrationFunc = bind(this.registrationFunc, this);
      this.onChannelMessage = bind(this.onChannelMessage, this);
      var rhost, rport;
      this.redisroutes = [];
      rhost = process.env['REDIS_PORT_6379_TCP_ADDR'] || '127.0.0.1';
      rport = process.env['REDIS_PORT_6379_TCP_PORT'] || '6379';
      this.listenclient = redis.createClient(rport, rhost);
      this.sendclient = redis.createClient(rport, rhost);
      this.listenclient.subscribe('spinchannel');
      this.listenclient.on('message', this.onChannelMessage);
      messageRouter.addMethod('redis', this);
    }

    RedisMethod.prototype.onChannelMessage = function(channel, message) {
      var clientChannel, msg, target;
      console.log('redismethod got channel ' + channel + ' message ' + message);
      msg = JSON.parse(message);
      if (debug) {
        console.dir(msg);
      }
      clientChannel = msg.channelID;
      if (clientChannel) {
        ClientEndpoints.registerEndpoint(msg.channelID, function(msg) {
          return this.sendclient.publish(clientChannel, JSON.stringify(msg));
        });
      }
      target = this.redisroutes[msg.target];
      if (target) {
        msg.client = msg.channelId;
        msg.messageId = msg.messageId || uuid.v4();
        msg.replyFunc = (function(_this) {
          return function(replydata) {
            console.log('redismethod replying to message ' + msg.messageId + ' on channel ' + msg.channelId);
            console(dir(message));
            replydata.messageId = msg.messageId;
            return _this.sendclient.publish(clientChannel, JSON.stringify(replydata));
          };
        })(this);
        return target(msg);
      } else {
        console.log('RedisMethod: could not find target "' + msg.target + '" sending failure back to channel "' + clientChannel + '"');
        return this.sendclient.publish(clientChannel, JSON.stringify({
          messageId: msg.messageId,
          status: 'FAILURE',
          info: 'could not find target "' + msg.target + '"',
          payload: null
        }));
      }
    };

    RedisMethod.prototype.registrationFunc = function(targetName, targetFunc) {
      return this.redisroutes[targetName] = targetFunc;
    };

    return RedisMethod;

  })();

  module.exports = RedisMethod;

}).call(this);

//# sourceMappingURL=RedisMethod.js.map
