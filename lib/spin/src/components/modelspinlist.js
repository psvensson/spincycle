// Generated by CoffeeScript 1.10.0
(function() {
  define(['spinclient', 'ractive', 'components/spinlist'], (function(_this) {
    return function(spinclient, Ractive, spinlist) {
      var modelspinlist;
      modelspinlist = Ractive.extend({
        components: {
          spinlist: spinlist
        },
        isolated: false,
        data: function() {
          return {
            type: '',
            onSelected: '',
            list: [],
            skipamount: 10,
            limit: 10,
            selectedindex: 0,
            qprop: 'name',
            qval: '',
            getListForModel: (function(_this) {
              return function() {
                var q;
                console.log('getListForModel');
                q = {
                  property: _this.get('qprop'),
                  value: _this.get('qval') || '',
                  limit: _this.get('limit'),
                  skip: _this.get('skipamount') * _this.get('selectedindex')
                };
                console.log('---- query sent to server is..');
                console.dir(q);
                return spinclient.emitMessage({
                  target: '_list' + _this.get('type') + 's',
                  query: q
                }).then(function(newlist) {
                  var tmp;
                  console.log('* search got back list of ' + newlist.length + ' items');
                  tmp = [];
                  newlist.forEach(function(item) {
                    spinclient.objects[item.id] = item;
                    return tmp.push(item);
                  });
                  return _this.set('list', tmp);
                });
              };
            })(this),
            onDeleted: (function(_this) {
              return function(_o) {
                var o, type;
                o = _o.context;
                type = _this.get('type');
                console.log('delete model clicked for ' + o.id);
                console.dir(o);
                return spinclient.emitMessage({
                  target: '_delete' + type,
                  obj: {
                    type: type,
                    id: o.id
                  }
                }).then(function(dres) {
                  console.log('delete result');
                  return console.dir(dres);
                });
              };
            })(this)
          };
        },
        oninit: function() {
          var type;
          console.log('modelspinlist oninit');
          this.on('onSelected', function(e) {
            var select;
            select = this.get('onSelected');
            if (select) {
              return select(e);
            }
          });
          this.get('getListForModel')();
          type = this.get('type');
          spinclient.emitMessage({
            target: 'registerForPopulationChangesFor',
            type: type
          }).then(function() {
            return console.log('registered for population changed for type ' + type);
          });
          return spinclient.registerListener({
            message: 'POPULATION_UPDATE',
            callback: (function(_this) {
              return function(update) {
                var idx, list;
                console.log('got population update callback');
                console.dir(update);
                list = _this.get('list');
                if (update.added) {
                  list.push(update.added);
                  return _this.set('list', list);
                } else {
                  idx = -1;
                  list.forEach(function(el, i) {
                    if (el.id === update.removed.id) {
                      return idx = i;
                    }
                  });
                  if (idx > -1) {
                    list.splice(idx, 1);
                  }
                  return _this.set('list', list);
                }
              };
            })(this)
          });
        },
        onNewModel: function() {
          var type;
          console.log('new model clicked');
          type = this.get('type');
          return spinclient.emitMessage({
            target: '_create' + type,
            obj: {
              type: type
            }
          }).then(function(newmodel) {
            console.log('create result');
            return console.dir(newmodel);
          });
        },
        template: "<div style='display:flex; flex-direction: column'>\n  <button on-click='onNewModel()' class=\"mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect\">\n    New {{type}}\n  </button>\n  <spinlist list='{{list}}' header=\"{{type}}\" onSelected='{{onSelected}}' onDeleted='{{onDeleted}}'></spinlist>\n</div>"
      });
      console.log('modelspinlist defined');
      return modelspinlist;
    };
  })(this));

}).call(this);

//# sourceMappingURL=modelspinlist.js.map
