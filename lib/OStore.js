// Generated by CoffeeScript 1.8.0
(function() {
  var DB, OStore, debug, defer, error, uuid;

  defer = require('node-promise').defer;

  DB = require('./DB');

  uuid = require('node-uuid');

  error = require('./Error').error;

  debug = process.env["DEBUG"];

  OStore = (function() {
    function OStore() {}

    OStore.objects = [];

    OStore.types = [];

    OStore.listeners = [];

    OStore.objectsByType = [];

    OStore.listObjectsByType = function(type) {
      var k, kk, many, rv, v, vv, _ref;
      rv = OStore.objectsByType[type] || [];
      if (debug) {
        console.log('OStore::listObjectsByType called for type ' + type);
      }
      if (rv.length === 0) {
        _ref = OStore.objectsByType;
        for (k in _ref) {
          v = _ref[k];
          console.log(k);
          many = 0;
          for (kk in v) {
            vv = v[kk];
            many++;
          }
          if (debug) {
            console.log(k + ' -> ' + many);
          }
        }
      }
      return rv;
    };

    OStore.listTypes = function() {
      var k, rv, v, _ref;
      rv = [];
      console.log('listTypes called');
      console.dir(OStore.types);
      _ref = OStore.types;
      for (k in _ref) {
        v = _ref[k];
        rv.push(v);
      }
      return rv;
    };

    OStore.storeObject = function(obj) {
      var lid, list, listener, objs, _results;
      if (obj) {
        OStore.objects[obj.id] = obj;
        OStore.types[obj.type] = obj.type;
        objs = OStore.objectsByType[obj.type] || [];
        objs[obj.id] = obj;
        OStore.objectsByType[obj.type] = objs;
        list = OStore.listeners[obj.id] || [];
        _results = [];
        for (lid in list) {
          listener = list[lid];
          _results.push(listener(obj));
        }
        return _results;
      }
    };

    OStore.getObject = function(id, type) {
      var obj, q;
      q = defer();
      obj = OStore.objects[id];
      if (obj) {

      } else {

      }
      q.resolve(obj);
      return q;
    };

    OStore.removeObject = function(obj) {
      var objs;
      if (obj && obj.id) {
        delete OStore.objects[obj.id];
        objs = OStore.objectsByType[obj.type] || [];
        if (objs[obj.id]) {
          delete objs[obj.id];
        }
        return OStore.objectsByType[obj.type] = obj;
      }
    };

    OStore.updateObj = function(record) {
      var changed, diff, lid, listeners, obj, p, pp, whitelist, _results;
      console.log('oStore.updateObj called for obj ' + record.id);
      obj = OStore.objects[record.id];
      whitelist = obj.getRecord();
      delete whitelist.id;
      diff = {};
      changed = false;
      for (p in whitelist) {
        for (pp in record) {
          if (pp === p) {
            if (obj[pp] !== record[pp]) {
              diff[pp] = record[pp];
              changed = true;
            }
            obj[pp] = record[pp];
            console.log('updating property "' + pp + '" on ' + record.type + ' id ' + record.id);
          }
        }
      }
      OStore.objects[record.id] = obj;
      listeners = OStore.listeners[obj.id] || [];
      if (changed) {
        _results = [];
        for (lid in listeners) {
          _results.push(listeners[lid](obj));
        }
        return _results;
      }
    };

    OStore.addListenerFor = function(id, type, cb) {
      var list, listenerId;
      list = OStore.listeners[id] || [];
      listenerId = uuid.v4();
      list[listenerId] = cb;
      OStore.listeners[id] = list;
      OStore.getObject(id, type).then(function(result) {
        return cb(result);
      }, error);
      return listenerId;
    };

    OStore.removeListenerFor = function(id, listenerId) {
      var cb, i, list, tmp;
      list = OStore.listeners[id] || [];
      delete list[listenerId];
      tmp = [];
      for (i in list) {
        cb = list[i];
        if (cb) {
          tmp[i] = cb;
        }
      }
      return OStore.listeners[id] = tmp;
    };

    return OStore;

  })();

  module.exports = OStore;

}).call(this);

//# sourceMappingURL=OStore.js.map
