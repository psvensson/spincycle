// Generated by CoffeeScript 1.8.0
(function() {
  var SampleGame, SamplePlayer, SuperModel, all, defer, uuid,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  SuperModel = require('../lib/SuperModel');

  defer = require('node-promise').defer;

  all = require('node-promise').allOrNone;

  uuid = require('node-uuid');

  SamplePlayer = require('./SamplePlayer');

  SampleGame = (function(_super) {
    __extends(SampleGame, _super);

    function SampleGame(record, noload) {
      this.record = record;
      this.getRecord = __bind(this.getRecord, this);
      this.toClient = __bind(this.toClient, this);
      this.createPlayers = __bind(this.createPlayers, this);
      this.postCreate = __bind(this.postCreate, this);
      this.type = 'SampleGame';
      this.resolvearr = [
        {
          name: 'players',
          "public": true,
          hashtable: true,
          type: 'SamplePlayer',
          ids: this.record.playerids
        }, {
          name: 'name',
          "public": true,
          value: this.record.name || uuid.v4()
        }
      ];
    }

    SampleGame.prototype.postCreate = function(q) {
      if (this.playerids.length === 0) {
        return this.createPlayers().then((function(_this) {
          return function() {
            return q.resolve(_this);
          };
        })(this));
      } else {
        return q.resolve(this);
      }
    };

    SampleGame.prototype.createPlayers = function() {
      var q;
      console.log('creating sample players');
      q = defer();
      this.players = [];
      all([new SamplePlayer(), new SamplePlayer()]).then((function(_this) {
        return function(results) {
          console.log('sample players created');
          results.forEach(function(player) {
            console.dir(player);
            _this.playerids.push(player.id);
            _this.players[player.name] = player;
            player.serialize();
            return console.log('  serializing player ' + player.name);
          });
          return q.resolve();
        };
      })(this));
      return q;
    };

    SampleGame.prototype.toClient = function() {
      return this.getRecord();
    };

    SampleGame.prototype.getRecord = function() {
      var k, record, v, _i, _len, _ref;
      record = {
        id: this.id,
        name: this.name,
        type: this.type,
        playerids: this.players.map(function(player) {
          return player.id;
        })
      };
      _ref = this.players;
      for (v = _i = 0, _len = _ref.length; _i < _len; v = ++_i) {
        k = _ref[v];
        record.playerids.push(v.id);
      }
      return record;
    };

    return SampleGame;

  })(SuperModel);

  module.exports = SampleGame;

}).call(this);

//# sourceMappingURL=SampleGame.js.map
